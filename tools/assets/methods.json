{
  "namespaces": {
    "markers": {
      "description": "Save and restore your position in timelines.",
      "methods": {
        "get": {
          "returnsArray": null,
          "formParams": [],
          "returns": "Marker",
          "uri": "/api/v1/markers",
          "namespace": "markers",
          "pathParams": [],
          "queryParams": [
            {
              "nullable": 0,
              "name": "timeline[]",
              "description": "Specify the timeline(s) for which markers should be fetched. Possible values: `home`, `notifications`. If not provided, an empty object will be returned.",
              "type": "array<String>",
              "required": 0
            }
          ],
          "description": "Get saved timeline positions",
          "name": "get",
          "method": "GET"
        },
        "create": {
          "returnsArray": null,
          "formParams": [],
          "namespace": "markers",
          "uri": "/api/v1/markers",
          "returns": "Marker",
          "queryParams": [],
          "name": "create",
          "description": "Save your position in a timeline",
          "method": "POST",
          "pathParams": []
        }
      }
    },
    "search": {
      "description": "Search for content in accounts, statuses and hashtags.",
      "methods": {
        "v1": {
          "namespace": "search",
          "uri": "/api/v1/search",
          "returns": "Search",
          "queryParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The search query.",
              "name": "q",
              "nullable": 0
            },
            {
              "nullable": 0,
              "name": "type",
              "description": "Specify whether to search for only `accounts`, `hashtags`, `statuses`",
              "required": 0,
              "type": "string"
            },
            {
              "description": "Attempt WebFinger lookup? Defaults to false.",
              "name": "resolve",
              "nullable": 0,
              "required": 0,
              "type": "boolean"
            },
            {
              "type": "string",
              "required": 0,
              "nullable": 0,
              "name": "account_id",
              "description": "If provided, will only return statuses authored by this account."
            },
            {
              "description": "Return results older than this ID.",
              "name": "max_id ",
              "nullable": 0,
              "type": "string",
              "required": 0
            },
            {
              "nullable": 0,
              "description": "Return results immediately newer than this ID.",
              "name": "min_id",
              "type": "string",
              "required": 0
            },
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return, per type. Defaults to 20 results per category. Max 40 results per category."
            },
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "description": "Offset in search results, used for pagination. Defaults to 0.",
              "name": "offset"
            }
          ],
          "name": "v1",
          "description": "(REMOVED) Search results (v1)",
          "method": "GET",
          "pathParams": [],
          "returnsArray": 1,
          "formParams": []
        },
        "v2": {
          "pathParams": [],
          "method": "GET",
          "description": "Perform a search",
          "queryParams": [
            {
              "nullable": 0,
              "name": "q",
              "description": "The search query.",
              "type": "string",
              "required": 1
            },
            {
              "required": 0,
              "type": "string",
              "name": "type",
              "description": "Specify whether to search for only `accounts`, `hashtags`, `statuses`",
              "nullable": 0
            },
            {
              "description": "Attempt WebFinger lookup? Defaults to false.",
              "name": "resolve",
              "nullable": 0,
              "required": 0,
              "type": "boolean"
            },
            {
              "required": 0,
              "type": "boolean",
              "name": "following",
              "description": "Only include accounts that the user is following? Defaults to false.",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "description": "If provided, will only return statuses authored by this account.",
              "name": "account_id"
            },
            {
              "type": "boolean",
              "required": 0,
              "nullable": 0,
              "description": "Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags.",
              "name": "exclude_unreviewed"
            },
            {
              "nullable": 0,
              "description": "Return results older than this ID.",
              "name": "max_id ",
              "type": "string",
              "required": 0
            },
            {
              "required": 0,
              "type": "string",
              "description": "Return results immediately newer than this ID.",
              "name": "min_id",
              "nullable": 0
            },
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "description": "Maximum number of results to return, per type. Defaults to 20 results per category. Max 40 results per category.",
              "name": "limit"
            },
            {
              "name": "offset",
              "description": "Skip the first n results.",
              "nullable": 0,
              "required": 0,
              "type": "integer"
            }
          ],
          "name": "v2",
          "returns": "Search",
          "namespace": "search",
          "uri": "/api/v2/search",
          "formParams": [],
          "returnsArray": null
        }
      }
    },
    "apps": {
      "description": "Register client applications that can be used to obtain OAuth tokens.",
      "methods": {
        "create": {
          "returns": "Application",
          "namespace": "apps",
          "uri": "/api/v1/apps",
          "pathParams": [],
          "queryParams": [],
          "name": "create",
          "description": "Create an application",
          "method": "POST",
          "returnsArray": null,
          "formParams": [
            {
              "nullable": 0,
              "description": "A name for your application",
              "name": "client_name",
              "required": 1,
              "type": "string"
            },
            {
              "type": "string",
              "required": 1,
              "description": "Where the user should be redirected after authorization. To display the authorization code to the user instead of redirecting to a web page, use `urn:ietf:wg:oauth:2.0:oob` in this parameter.",
              "name": "redirect_uris",
              "nullable": 0
            },
            {
              "type": "string",
              "required": 0,
              "nullable": 0,
              "description": "Space separated list of scopes. If none is provided, defaults to `read`. See [OAuth Scopes]({{< relref \"api/oauth-scopes\" >}}) for a list of possible scopes.",
              "name": "scopes"
            },
            {
              "description": "A URL to the homepage of your app",
              "name": "website",
              "nullable": 0,
              "type": "string",
              "required": 0
            }
          ]
        },
        "verify_credentials": {
          "formParams": [],
          "returnsArray": null,
          "method": "GET",
          "queryParams": [],
          "name": "verify_credentials",
          "description": "Verify your app works",
          "pathParams": [],
          "uri": "/api/v1/apps/verify_credentials",
          "namespace": "apps",
          "returns": "Application"
        }
      }
    },
    "lists": {
      "methods": {
        "accounts-remove": {
          "description": "Remove accounts from list",
          "queryParams": [],
          "name": "accounts-remove",
          "method": "DELETE",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "description": "The ID of the List in the database.",
              "name": "id"
            }
          ],
          "uri": "/api/v1/lists/:id/accounts",
          "namespace": "lists",
          "returns": "EmptyOrUnknown",
          "formParams": [
            {
              "name": "account_ids[]",
              "description": "The accounts that should be removed from the list.",
              "nullable": 0,
              "type": "array<String>",
              "required": 1
            }
          ],
          "returnsArray": 1
        },
        "accounts-add": {
          "returnsArray": 1,
          "formParams": [
            {
              "nullable": 0,
              "name": "account_ids[]",
              "description": "The accounts that should be added to the list.",
              "type": "array<String>",
              "required": 1
            }
          ],
          "uri": "/api/v1/lists/:id/accounts",
          "namespace": "lists",
          "returns": "EmptyOrUnknown",
          "method": "POST",
          "queryParams": [],
          "description": "Add accounts to a list",
          "name": "accounts-add",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "name": "id",
              "description": "The ID of the List in the database.",
              "nullable": 0
            }
          ]
        },
        "delete": {
          "method": "DELETE",
          "description": "Delete a list",
          "queryParams": [],
          "name": "delete",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The ID of the List in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "uri": "/api/v1/lists/:id",
          "namespace": "lists",
          "returns": "EmptyOrUnknown",
          "formParams": [],
          "returnsArray": 1
        },
        "get": {
          "formParams": [],
          "returnsArray": 1,
          "pathParams": [],
          "method": "GET",
          "name": "get",
          "queryParams": [],
          "description": "View your lists",
          "returns": "List",
          "uri": "/api/v1/lists",
          "namespace": "lists"
        },
        "create": {
          "returnsArray": 1,
          "formParams": [
            {
              "nullable": 0,
              "description": "The title of the list to be created.",
              "name": "title",
              "required": 1,
              "type": "string"
            },
            {
              "required": 0,
              "type": "string",
              "name": "replies_policy",
              "description": "One of `followed`, `list`, or `none`. Defaults to `list`.",
              "nullable": 0
            }
          ],
          "returns": "List",
          "namespace": "lists",
          "uri": "/api/v1/lists",
          "pathParams": [],
          "queryParams": [],
          "name": "create",
          "description": "Create a list",
          "method": "POST"
        },
        "update": {
          "formParams": [
            {
              "description": "The title of the list to be created.",
              "name": "title",
              "nullable": 0,
              "type": "string",
              "required": 1
            },
            {
              "description": "One of `followed`, `list`, or `none`. Defaults to `list`.",
              "name": "replies_policy",
              "nullable": 0,
              "type": "string",
              "required": 0
            }
          ],
          "returnsArray": 1,
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "description": "The ID of the List in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "queryParams": [],
          "name": "update",
          "description": "Update a list",
          "method": "PUT",
          "returns": "List",
          "namespace": "lists",
          "uri": "/api/v1/lists/:id"
        },
        "get-one": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "List",
          "uri": "/api/v1/lists/:id",
          "namespace": "lists",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The ID of the List in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "method": "GET",
          "description": "Show a single list",
          "queryParams": [],
          "name": "get-one"
        },
        "accounts": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Account",
          "uri": "/api/v1/lists/:id/accounts",
          "namespace": "lists",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the List in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "description": "View accounts in a list",
          "queryParams": [
            {
              "name": "limit",
              "description": "Maximum number of results. Defaults to 40 accounts. Max 80 accounts. Set to 0 in order to get all accounts without pagination.",
              "nullable": 0,
              "type": "integer",
              "required": 0
            }
          ],
          "name": "accounts",
          "method": "GET"
        }
      },
      "description": " View and manage lists. See also: /api/v1/timelines/list/id for loading a list timeline."
    },
    "proofs": {
      "description": "For use by identity providers.",
      "methods": {
        "get": {
          "method": "GET",
          "name": "get",
          "queryParams": [
            {
              "nullable": 0,
              "name": "provider",
              "description": "The identity provider to be looked up. Currently only supports `keybase` (case-sensitive).",
              "required": 0,
              "type": "string"
            },
            {
              "nullable": 0,
              "description": "The username on the selected identity provider.",
              "name": "username",
              "required": 0,
              "type": "string"
            }
          ],
          "description": "(REMOVED) View identity proofs",
          "pathParams": [],
          "uri": "/api/proofs",
          "namespace": "proofs",
          "returns": "EmptyOrUnknown",
          "formParams": [],
          "returnsArray": null
        }
      }
    },
    "polls": {
      "methods": {
        "vote": {
          "uri": "/api/v1/polls/:id/votes",
          "namespace": "polls",
          "returns": "Poll",
          "name": "vote",
          "queryParams": [],
          "description": "Vote on a poll",
          "method": "POST",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "nullable": 0,
              "description": "The ID of the Poll in the database.",
              "name": "id"
            }
          ],
          "returnsArray": null,
          "formParams": [
            {
              "description": "Provide your own votes as an index for each option (starting from 0).",
              "name": "choices[]",
              "nullable": 0,
              "type": "array<Integer>",
              "required": 1
            }
          ]
        },
        "get": {
          "returns": "Poll",
          "namespace": "polls",
          "uri": "/api/v1/polls/:id",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Poll in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "method": "GET",
          "queryParams": [],
          "name": "get",
          "description": "View a poll",
          "returnsArray": null,
          "formParams": []
        }
      },
      "description": " View and vote on polls attached to statuses. To discover poll ID, you will need to GET a Status first and then check for a `poll` property."
    },
    "featured_tags": {
      "description": "Feature tags that you use frequently on your profile.",
      "methods": {
        "suggestions": {
          "queryParams": [],
          "name": "suggestions",
          "description": "View suggested tags to feature",
          "method": "GET",
          "pathParams": [],
          "namespace": "featured_tags",
          "uri": "/api/v1/featured_tags/suggestions",
          "returns": "Tag",
          "formParams": [],
          "returnsArray": 1
        },
        "get": {
          "method": "GET",
          "queryParams": [],
          "name": "get",
          "description": "View your featured tags",
          "pathParams": [],
          "uri": "/api/v1/featured_tags",
          "namespace": "featured_tags",
          "returns": "FeaturedTag",
          "formParams": [],
          "returnsArray": 1
        },
        "unfeature": {
          "returnsArray": 1,
          "formParams": [],
          "uri": "/api/v1/featured_tags/:id",
          "namespace": "featured_tags",
          "returns": "EmptyOrUnknown",
          "method": "DELETE",
          "name": "unfeature",
          "queryParams": [],
          "description": "Unfeature a tag",
          "pathParams": [
            {
              "nullable": 0,
              "description": "The ID of the FeaturedTag in the database.",
              "name": "id",
              "required": 1,
              "type": "string"
            }
          ]
        },
        "feature": {
          "method": "POST",
          "description": "Feature a tag",
          "queryParams": [],
          "name": "feature",
          "pathParams": [],
          "uri": "/api/v1/featured_tags",
          "namespace": "featured_tags",
          "returns": "FeaturedTag",
          "formParams": [
            {
              "description": "The hashtag to be featured, without the hash sign.",
              "name": "name",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "returnsArray": 1
        }
      }
    },
    "push": {
      "description": " Subscribe to and receive push notifications when a server-side notification is received, via the Web Push API",
      "methods": {
        "get": {
          "pathParams": [],
          "method": "GET",
          "queryParams": [],
          "name": "get",
          "description": "Get current subscription",
          "returns": "WebPushSubscription",
          "namespace": "push",
          "uri": "/api/v1/push/subscription",
          "formParams": [],
          "returnsArray": null
        },
        "delete": {
          "returns": "EmptyOrUnknown",
          "namespace": "push",
          "uri": "/api/v1/push/subscription",
          "pathParams": [],
          "name": "delete",
          "queryParams": [],
          "description": "Remove current subscription",
          "method": "DELETE",
          "returnsArray": null,
          "formParams": []
        },
        "update": {
          "description": "Change types of notifications",
          "queryParams": [],
          "name": "update",
          "method": "PUT",
          "pathParams": [],
          "namespace": "push",
          "uri": "/api/v1/push/subscription",
          "returns": "WebPushSubscription",
          "formParams": [
            {
              "required": 0,
              "type": "string",
              "description": "Specify whether to receive push notifications from `all`, `followed`, `follower`, or `none` users.",
              "name": "policy",
              "nullable": 0
            }
          ],
          "returnsArray": null
        },
        "create": {
          "queryParams": [],
          "description": "Subscribe to push notifications",
          "name": "create",
          "method": "POST",
          "pathParams": [],
          "uri": "/api/v1/push/subscription",
          "namespace": "push",
          "returns": "WebPushSubscription",
          "formParams": [],
          "returnsArray": null
        }
      }
    },
    "oembed": {
      "methods": {
        "get": {
          "method": "GET",
          "queryParams": [
            {
              "nullable": 0,
              "description": "URL of a status.",
              "name": "url",
              "type": "string",
              "required": 1
            },
            {
              "nullable": 0,
              "name": "maxwidth",
              "description": "Width of the iframe. Defaults to 400",
              "type": "integer",
              "required": 0
            },
            {
              "required": 0,
              "type": "integer",
              "description": "Height of the iframe. Defaults to null",
              "name": "maxheight",
              "nullable": 0
            }
          ],
          "name": "get",
          "description": "Get OEmbed info as JSON",
          "pathParams": [],
          "namespace": "oembed",
          "uri": "/api/oembed",
          "returns": "EmptyOrUnknown",
          "formParams": [],
          "returnsArray": null
        }
      },
      "description": "For generating OEmbed previews."
    },
    "tags": {
      "methods": {
        "get": {
          "returnsArray": null,
          "formParams": [],
          "returns": "Tag",
          "namespace": "tags",
          "uri": "/api/v1/tags/:id",
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The name of the hashtag.",
              "required": 1,
              "type": "string"
            }
          ],
          "method": "GET",
          "name": "get",
          "queryParams": [],
          "description": "View information about a single tag"
        },
        "follow": {
          "returnsArray": null,
          "formParams": [],
          "returns": "Tag",
          "namespace": "tags",
          "uri": "/api/v1/tags/:id/follow",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The name of the hashtag.",
              "name": "id",
              "nullable": 0
            }
          ],
          "queryParams": [],
          "description": "Follow a hashtag",
          "name": "follow",
          "method": "POST"
        },
        "unfollow": {
          "returnsArray": null,
          "formParams": [],
          "uri": "/api/v1/tags/:id/unfollow",
          "namespace": "tags",
          "returns": "Tag",
          "queryParams": [],
          "description": "Unfollow a hashtag",
          "name": "unfollow",
          "method": "POST",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "nullable": 0,
              "name": "id",
              "description": "The name of the hashtag."
            }
          ]
        }
      },
      "description": "View information about or follow/unfollow hashtags."
    },
    "filters": {
      "methods": {
        "update": {
          "formParams": [
            {
              "name": "title",
              "description": "The name of the filter group.",
              "nullable": 0,
              "required": 0,
              "type": "string"
            },
            {
              "required": 0,
              "type": "array<String>",
              "nullable": 0,
              "name": "context[]",
              "description": "Where the filter should be applied. Specify at least one of `home`, `notifications`, `public`, `thread`, `account`."
            },
            {
              "nullable": 0,
              "name": "filter_action",
              "description": "The policy to be applied when the filter is matched. Specify `warn` or `hide`.",
              "type": "string",
              "required": 0
            },
            {
              "required": 0,
              "type": "integer",
              "name": "expires_in",
              "description": "How many seconds from now should the filter expire?",
              "nullable": 0
            }
          ],
          "returnsArray": 1,
          "queryParams": [],
          "description": "Update a filter",
          "name": "update",
          "method": "PUT",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Filter in the database."
            }
          ],
          "namespace": "filters",
          "uri": "/api/v2/filters/:id",
          "returns": "Filter"
        },
        "update-v1": {
          "returnsArray": 1,
          "formParams": [
            {
              "name": "phrase",
              "description": "The text to be filtered.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            },
            {
              "required": 1,
              "type": "array<String>",
              "nullable": 0,
              "name": "context[]",
              "description": "Specify at least one of `home`, `notifications`, `public`, `thread`, `account`."
            },
            {
              "description": "Should the server irreversibly drop matching entities from home and notifications? Defaults to false.",
              "name": "irreversible",
              "nullable": 0,
              "required": 0,
              "type": "boolean"
            },
            {
              "nullable": 0,
              "description": "Should the filter consider word boundaries? Defaults to false.",
              "name": "whole_word",
              "type": "boolean",
              "required": 0
            },
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "name": "expires_in",
              "description": "Number of seconds from now that the filter should expire. Otherwise, `null` for a filter that doesn't expire."
            }
          ],
          "returns": "V1::Filter",
          "namespace": "filters",
          "uri": "/api/v1/filters/:id",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the FilterKeyword in the database.",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "name": "update-v1",
          "queryParams": [],
          "description": "Update a filter",
          "method": "PUT"
        },
        "keywords-get-one": {
          "formParams": [],
          "returnsArray": 1,
          "method": "GET",
          "description": "View a single keyword",
          "queryParams": [],
          "name": "keywords-get-one",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "id",
              "description": "The ID of the FilterKeyword in the database."
            }
          ],
          "uri": "/api/v2/filters/keywords/:id",
          "namespace": "filters",
          "returns": "FilterKeyword"
        },
        "keywords-update": {
          "formParams": [
            {
              "required": 1,
              "type": "string",
              "name": "keyword",
              "description": "The keyword to be added to the filter group.",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "boolean",
              "nullable": 0,
              "name": "whole_word",
              "description": "Whether the keyword should consider word boundaries."
            }
          ],
          "returnsArray": 1,
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The ID of the FilterKeyword in the database.",
              "required": 1,
              "type": "string"
            }
          ],
          "method": "PUT",
          "description": "Edit a keyword within a filter",
          "queryParams": [],
          "name": "keywords-update",
          "returns": "FilterKeyword",
          "namespace": "filters",
          "uri": "/api/v2/filters/keywords/:id"
        },
        "delete": {
          "formParams": [],
          "returnsArray": 1,
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Filter in the database.",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "queryParams": [],
          "name": "delete",
          "description": "Delete a filter",
          "method": "DELETE",
          "returns": "EmptyOrUnknown",
          "uri": "/api/v2/filters/:id",
          "namespace": "filters"
        },
        "statuses-get-one": {
          "pathParams": [
            {
              "nullable": 0,
              "description": "The ID of the FilterStatus in the database.",
              "name": "id",
              "required": 1,
              "type": "string"
            }
          ],
          "method": "GET",
          "queryParams": [],
          "name": "statuses-get-one",
          "description": "View a single status filter",
          "returns": "FilterStatus",
          "namespace": "filters",
          "uri": "/api/v2/filters/statuses/:id",
          "formParams": [],
          "returnsArray": 1
        },
        "delete-v1": {
          "returnsArray": 1,
          "formParams": [],
          "uri": "/api/v1/filters/:id",
          "namespace": "filters",
          "returns": "EmptyOrUnknown",
          "method": "DELETE",
          "description": "Remove a filter",
          "queryParams": [],
          "name": "delete-v1",
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Filter in the database.",
              "required": 1,
              "type": "string"
            }
          ]
        },
        "create": {
          "uri": "/api/v2/filters",
          "namespace": "filters",
          "returns": "Filter",
          "queryParams": [],
          "name": "create",
          "description": "Create a filter",
          "method": "POST",
          "pathParams": [],
          "returnsArray": 1,
          "formParams": [
            {
              "nullable": 0,
              "name": "title",
              "description": "The name of the filter group.",
              "required": 1,
              "type": "string"
            },
            {
              "type": "array<String>",
              "required": 1,
              "nullable": 0,
              "name": "context[]",
              "description": "Where the filter should be applied. Specify at least one of `home`, `notifications`, `public`, `thread`, `account`."
            },
            {
              "nullable": 0,
              "description": "The policy to be applied when the filter is matched. Specify `warn` or `hide`.",
              "name": "filter_action",
              "type": "string",
              "required": 0
            },
            {
              "nullable": 0,
              "description": "How many seconds from now should the filter expire?",
              "name": "expires_in",
              "type": "integer",
              "required": 0
            }
          ]
        },
        "create-v1": {
          "returnsArray": 1,
          "formParams": [
            {
              "type": "string",
              "required": 1,
              "name": "phrase",
              "description": "The text to be filtered.",
              "nullable": 0
            },
            {
              "nullable": 0,
              "name": "context[]",
              "description": "Where the filter should be applied. Specify at least one of `home`, `notifications`, `public`, `thread`, `account`.",
              "type": "array<String>",
              "required": 1
            },
            {
              "name": "irreversible",
              "description": "Should the server irreversibly drop matching entities from home and notifications? Defaults to false.",
              "nullable": 0,
              "type": "boolean",
              "required": 0
            },
            {
              "required": 0,
              "type": "boolean",
              "name": "whole_word",
              "description": "Should the filter consider word boundaries for this keyword? Defaults to false.",
              "nullable": 0
            },
            {
              "description": "Number of seconds from now that the filter should expire. Otherwise, `null` for a filter that doesn't expire.",
              "name": "expires_in",
              "nullable": 0,
              "required": 0,
              "type": "integer"
            }
          ],
          "uri": "/api/v1/filters",
          "namespace": "filters",
          "returns": "V1::Filter",
          "method": "POST",
          "queryParams": [],
          "name": "create-v1",
          "description": "Create a filter",
          "pathParams": []
        },
        "get": {
          "uri": "/api/v2/filters",
          "namespace": "filters",
          "returns": "Filter",
          "description": "View all filters",
          "queryParams": [],
          "name": "get",
          "method": "GET",
          "pathParams": [],
          "returnsArray": 1,
          "formParams": []
        },
        "get-one": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "filters",
          "uri": "/api/v2/filters/:id",
          "returns": "Filter",
          "method": "GET",
          "name": "get-one",
          "queryParams": [],
          "description": "View a specific filter",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "name": "id",
              "description": "The ID of the Filter in the database.",
              "nullable": 0
            }
          ]
        },
        "get-one-v1": {
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "name": "id",
              "description": "The ID of the FilterKeyword in the database.",
              "nullable": 0
            }
          ],
          "queryParams": [],
          "name": "get-one-v1",
          "description": "View a single filter",
          "method": "GET",
          "returns": "V1::Filter",
          "uri": "/api/v1/filters/:id",
          "namespace": "filters",
          "formParams": [],
          "returnsArray": 1
        },
        "keywords-get": {
          "formParams": [],
          "returnsArray": 1,
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The ID of the Filter in the database.",
              "name": "filter_id",
              "nullable": 0
            }
          ],
          "description": "View keywords added to a filter",
          "queryParams": [],
          "name": "keywords-get",
          "method": "GET",
          "returns": "FilterKeyword",
          "namespace": "filters",
          "uri": "/api/v2/filters/:filter_id/keywords"
        },
        "keywords-create": {
          "namespace": "filters",
          "uri": "/api/v2/filters/:filter_id/keywords",
          "returns": "FilterKeyword",
          "method": "POST",
          "queryParams": [],
          "description": "Add a keyword to a filter",
          "name": "keywords-create",
          "pathParams": [
            {
              "nullable": 0,
              "description": "The ID of the Filter in the database.",
              "name": "filter_id",
              "required": 1,
              "type": "string"
            }
          ],
          "returnsArray": 1,
          "formParams": [
            {
              "nullable": 0,
              "name": "keyword",
              "description": "The keyword to be added to the filter group.",
              "required": 1,
              "type": "string"
            },
            {
              "type": "boolean",
              "required": 0,
              "name": "whole_word",
              "description": "Whether the keyword should consider word boundaries.",
              "nullable": 0
            }
          ]
        },
        "keywords-delete": {
          "returns": "EmptyOrUnknown",
          "uri": "/api/v2/filters/keywords/:id",
          "namespace": "filters",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The ID of the FilterKeyword in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "queryParams": [],
          "name": "keywords-delete",
          "description": "Remove keywords from a filter",
          "method": "DELETE",
          "returnsArray": 1,
          "formParams": []
        },
        "statuses-get": {
          "formParams": [],
          "returnsArray": 1,
          "queryParams": [],
          "description": "View all status filters",
          "name": "statuses-get",
          "method": "GET",
          "pathParams": [
            {
              "description": "The ID of the Filter in the database.",
              "name": "filter_id",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "namespace": "filters",
          "uri": "/api/v2/filters/:filter_id/statuses",
          "returns": "FilterStatus"
        },
        "get-v1": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "V1::Filter",
          "namespace": "filters",
          "uri": "/api/v1/filters",
          "pathParams": [],
          "queryParams": [],
          "name": "get-v1",
          "description": "View your filters",
          "method": "GET"
        },
        "statuses-remove": {
          "formParams": [],
          "returnsArray": 1,
          "description": "Remove a status from a filter group",
          "queryParams": [],
          "name": "statuses-remove",
          "method": "DELETE",
          "pathParams": [
            {
              "nullable": 0,
              "description": "The ID of the FilterStatus in the database.",
              "name": "id",
              "type": "string",
              "required": 1
            }
          ],
          "namespace": "filters",
          "uri": "/api/v2/filters/statuses/:id",
          "returns": "FilterStatus"
        },
        "statuses-add": {
          "returns": "FilterStatus",
          "namespace": "filters",
          "uri": "/api/v2/filters/:filter_id/statuses",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "description": "The ID of the Filter in the database.",
              "name": "filter_id",
              "nullable": 0
            }
          ],
          "method": "POST",
          "queryParams": [],
          "description": "Add a status to a filter group",
          "name": "statuses-add",
          "returnsArray": 1,
          "formParams": []
        }
      },
      "description": "Create and manage filters."
    },
    "conversations": {
      "methods": {
        "delete": {
          "pathParams": [
            {
              "description": "The ID of the Conversation in the database.",
              "name": "id",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "name": "delete",
          "queryParams": [],
          "description": "Remove a conversation",
          "method": "DELETE",
          "returns": "EmptyOrUnknown",
          "namespace": "conversations",
          "uri": "/api/v1/conversations/:id",
          "formParams": [],
          "returnsArray": 1
        },
        "read": {
          "formParams": [],
          "returnsArray": 1,
          "method": "POST",
          "description": "Mark a conversation as read",
          "queryParams": [],
          "name": "read",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Conversation in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "uri": "/api/v1/conversations/:id/read",
          "namespace": "conversations",
          "returns": "Conversation"
        },
        "get": {
          "returns": "Conversation",
          "uri": "/api/v1/conversations",
          "namespace": "conversations",
          "pathParams": [],
          "description": "View all conversations",
          "queryParams": [
            {
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 20 conversations. Max 40 conversations.",
              "nullable": 0,
              "type": "integer",
              "required": 0
            }
          ],
          "name": "get",
          "method": "GET",
          "returnsArray": 1,
          "formParams": []
        }
      },
      "description": " Direct conversations with other participants. (Currently, just threads containing a post with \"direct\" visibility.)"
    },
    "directory": {
      "description": "A directory of profiles that your website is aware of.",
      "methods": {
        "get": {
          "namespace": "directory",
          "uri": "/api/v1/directory",
          "returns": "Account",
          "queryParams": [
            {
              "nullable": 0,
              "description": "Skip the first n results.",
              "name": "offset",
              "type": "integer",
              "required": 0
            },
            {
              "type": "integer",
              "required": 0,
              "name": "limit",
              "description": "How many accounts to load. Defaults to 40 accounts. Max 80 accounts.",
              "nullable": 0
            },
            {
              "nullable": 0,
              "name": "order",
              "description": "Use `active` to sort by most recently posted statuses (default) or `new` to sort by most recently created profiles.",
              "required": 0,
              "type": "string"
            },
            {
              "type": "boolean",
              "required": 0,
              "name": "local",
              "description": "If true, returns only local accounts.",
              "nullable": 0
            }
          ],
          "description": "View profile directory",
          "name": "get",
          "method": "GET",
          "pathParams": [],
          "returnsArray": 1,
          "formParams": []
        }
      }
    },
    "mutes": {
      "methods": {
        "get": {
          "pathParams": [],
          "method": "GET",
          "queryParams": [
            {
              "required": 0,
              "type": "integer",
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
            }
          ],
          "description": "View muted accounts",
          "name": "get",
          "returns": "Account",
          "uri": "/api/v1/mutes",
          "namespace": "mutes",
          "formParams": [],
          "returnsArray": 1
        }
      },
      "description": "View your mutes. See also accounts/:id/{mute,unmute}"
    },
    "oauth": {
      "description": "Generate and manage OAuth tokens.",
      "methods": {
        "revoke": {
          "returnsArray": null,
          "formParams": [
            {
              "nullable": 0,
              "description": "The client ID, obtained during app registration.",
              "name": "client_id",
              "type": "string",
              "required": 1
            },
            {
              "name": "client_secret",
              "description": "The client secret, obtained during app registration.",
              "nullable": 0,
              "type": "string",
              "required": 1
            },
            {
              "name": "token",
              "description": "The previously obtained token, to be invalidated.",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "namespace": "oauth",
          "uri": "/oauth/revoke",
          "returns": "EmptyOrUnknown",
          "queryParams": [],
          "description": "Revoke a token",
          "name": "revoke",
          "method": "POST",
          "pathParams": []
        },
        "token": {
          "returnsArray": null,
          "formParams": [
            {
              "type": "string",
              "required": 1,
              "description": "Set equal to `authorization_code` if `code` is provided in order to gain user-level access. Otherwise, set equal to `client_credentials` to obtain app-level access only.",
              "name": "grant_type",
              "nullable": 0
            },
            {
              "nullable": 0,
              "description": "A user authorization code, obtained via [GET /oauth/authorize](#authorize).",
              "name": "code",
              "required": 0,
              "type": "string"
            },
            {
              "nullable": 0,
              "name": "client_id",
              "description": "The client ID, obtained during app registration.",
              "required": 1,
              "type": "string"
            },
            {
              "description": "The client secret, obtained during app registration.",
              "name": "client_secret",
              "nullable": 0,
              "required": 1,
              "type": "string"
            },
            {
              "nullable": 0,
              "name": "redirect_uri",
              "description": "Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the token will be shown instead. Must match one of the `redirect_uris` declared during app registration.",
              "required": 1,
              "type": "string"
            },
            {
              "type": "string",
              "required": 0,
              "description": "List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). If `code` was provided, then this must be equal to the `scope` requested from the user. Otherwise, it must be a subset of `scopes` declared during app registration. If not provided, defaults to `read`.",
              "name": "scope",
              "nullable": 0
            }
          ],
          "returns": "Token",
          "namespace": "oauth",
          "uri": "/oauth/token",
          "pathParams": [],
          "method": "POST",
          "queryParams": [],
          "name": "token",
          "description": "Obtain a token"
        },
        "authorize": {
          "returns": "EmptyOrUnknown",
          "namespace": "oauth",
          "uri": "/oauth/authorize",
          "pathParams": [],
          "method": "GET",
          "name": "authorize",
          "queryParams": [
            {
              "type": "string",
              "required": 1,
              "description": "Should be set equal to `code`.",
              "name": "response_type",
              "nullable": 0
            },
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "description": "The client ID, obtained during app registration.",
              "name": "client_id"
            },
            {
              "type": "string",
              "required": 1,
              "description": "Set a URI to redirect the user to. If this parameter is set to `urn:ietf:wg:oauth:2.0:oob` then the authorization code will be shown instead. Must match one of the `redirect_uris` declared during app registration.",
              "name": "redirect_uri",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "description": "List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). Must be a subset of `scopes` declared during app registration. If not provided, defaults to `read`.",
              "name": "scope"
            },
            {
              "name": "force_login",
              "description": "Forces the user to re-login, which is necessary for authorizing with multiple accounts from the same instance.",
              "nullable": 0,
              "type": "boolean",
              "required": 0
            },
            {
              "description": "The ISO 639-1 two-letter language code to use while rendering the authorization form.",
              "name": "lang",
              "nullable": 0,
              "type": "string",
              "required": 0
            }
          ],
          "description": "Authorize a user",
          "returnsArray": null,
          "formParams": []
        }
      }
    },
    "accounts": {
      "methods": {
        "unblock": {
          "returns": "Relationship",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id/unblock",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "description": "The ID of the Account in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "name": "unblock",
          "queryParams": [],
          "description": "Unblock account",
          "method": "POST",
          "returnsArray": 1,
          "formParams": []
        },
        "follow": {
          "formParams": [
            {
              "type": "boolean",
              "required": 0,
              "nullable": 0,
              "name": "reblogs",
              "description": "Receive this account's reblogs in home timeline? Defaults to true."
            },
            {
              "nullable": 0,
              "name": "notify",
              "description": "Receive notifications when this account posts a status? Defaults to false.",
              "required": 0,
              "type": "boolean"
            },
            {
              "required": 0,
              "type": "array<String>",
              "description": "Filter received statuses for these languages. If not provided, you will receive this account's posts in all languages.",
              "name": "languages",
              "nullable": 0
            }
          ],
          "returnsArray": 1,
          "method": "POST",
          "queryParams": [],
          "name": "follow",
          "description": "Follow account",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Account in the database."
            }
          ],
          "uri": "/api/v1/accounts/:id/follow",
          "namespace": "accounts",
          "returns": "Relationship"
        },
        "familiar_followers": {
          "queryParams": [
            {
              "nullable": 0,
              "description": "Find familiar followers for the provided account IDs.",
              "name": "id[]",
              "required": 0,
              "type": "array<String>"
            }
          ],
          "description": "Find familiar followers",
          "name": "familiar_followers",
          "method": "GET",
          "pathParams": [],
          "uri": "/api/v1/accounts/familiar_followers",
          "namespace": "accounts",
          "returns": "FamiliarFollowers",
          "formParams": [],
          "returnsArray": 1
        },
        "relationships": {
          "returns": "Relationship",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/relationships",
          "pathParams": [],
          "method": "GET",
          "queryParams": [
            {
              "required": 0,
              "type": "array",
              "description": "Check relationships for the provided account IDs.",
              "name": "id[]",
              "nullable": 0
            }
          ],
          "name": "relationships",
          "description": "Check relationships to other accounts",
          "returnsArray": 1,
          "formParams": []
        },
        "block": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Relationship",
          "uri": "/api/v1/accounts/:id/block",
          "namespace": "accounts",
          "pathParams": [
            {
              "description": "The ID of the Account in the database.",
              "name": "id",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "method": "POST",
          "queryParams": [],
          "name": "block",
          "description": "Block account"
        },
        "lookup": {
          "returns": "Account",
          "uri": "/api/v1/accounts/lookup",
          "namespace": "accounts",
          "pathParams": [],
          "queryParams": [
            {
              "description": "The username or Webfinger address to lookup.",
              "name": "acct",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "name": "lookup",
          "description": "Lookup account ID from Webfinger address",
          "method": "GET",
          "returnsArray": 1,
          "formParams": []
        },
        "following": {
          "returns": "Account",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id/following",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Account in the database.",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "name": "following",
          "queryParams": [
            {
              "type": "integer",
              "required": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
              "nullable": 0
            }
          ],
          "description": "Get account's following",
          "method": "GET",
          "returnsArray": 1,
          "formParams": []
        },
        "verify_credentials": {
          "formParams": [],
          "returnsArray": null,
          "pathParams": [],
          "method": "GET",
          "description": "Verify account credentials",
          "queryParams": [],
          "name": "verify_credentials",
          "returns": "CredentialAccount",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/verify_credentials"
        },
        "create": {
          "formParams": [
            {
              "required": 1,
              "type": "string",
              "nullable": 0,
              "name": "username",
              "description": "The desired username for the account"
            },
            {
              "nullable": 0,
              "name": "email",
              "description": "The email address to be used for login",
              "type": "string",
              "required": 1
            },
            {
              "name": "password",
              "description": "The password to be used for login",
              "nullable": 0,
              "required": 1,
              "type": "string"
            },
            {
              "nullable": 0,
              "name": "agreement",
              "description": "Whether the user agrees to the local rules, terms, and policies. These should be presented to the user in order to allow them to consent before setting this parameter to TRUE.",
              "type": "boolean",
              "required": 1
            },
            {
              "description": "The language of the confirmation email that will be sent.",
              "name": "locale",
              "nullable": 0,
              "type": "string",
              "required": 1
            },
            {
              "name": "reason",
              "description": "If registrations require manual approval, this text will be reviewed by moderators.",
              "nullable": 0,
              "type": "string",
              "required": 0
            }
          ],
          "returnsArray": null,
          "pathParams": [],
          "description": "Register an account",
          "queryParams": [],
          "name": "create",
          "method": "POST",
          "returns": "Token",
          "uri": "/api/v1/accounts",
          "namespace": "accounts"
        },
        "get": {
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "name": "id",
              "description": "The ID of the Account in the database.",
              "nullable": 0
            }
          ],
          "queryParams": [],
          "name": "get",
          "description": "Get account",
          "method": "GET",
          "returns": "Account",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id",
          "formParams": [],
          "returnsArray": null
        },
        "note": {
          "uri": "/api/v1/accounts/:id/note",
          "namespace": "accounts",
          "returns": "Relationship",
          "method": "POST",
          "description": "Set private note on profile",
          "queryParams": [],
          "name": "note",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "description": "The ID of the Account in the database.",
              "name": "id"
            }
          ],
          "returnsArray": 1,
          "formParams": [
            {
              "name": "comment",
              "description": "The comment to be set on that user. Provide an empty string or leave out this parameter to clear the currently set note.",
              "nullable": 0,
              "type": "string",
              "required": 0
            }
          ]
        },
        "update_credentials": {
          "namespace": "accounts",
          "uri": "/api/v1/accounts/update_credentials",
          "returns": "Account",
          "method": "PATCH",
          "name": "update_credentials",
          "queryParams": [],
          "description": "Update account credentials",
          "pathParams": [],
          "returnsArray": null,
          "formParams": [
            {
              "description": "The display name to use for the profile. ",
              "name": "display_name",
              "nullable": 0,
              "type": "string",
              "required": 0
            },
            {
              "type": "string",
              "required": 0,
              "name": "note",
              "description": "The account bio.",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "boolean",
              "nullable": 0,
              "description": "Whether manual approval of follow requests is required.",
              "name": "locked"
            },
            {
              "nullable": 0,
              "name": "bot",
              "description": "Whether the account has a bot flag.",
              "type": "boolean",
              "required": 0
            },
            {
              "type": "boolean",
              "required": 0,
              "nullable": 0,
              "description": "Whether the account should be shown in the profile directory.",
              "name": "discoverable"
            },
            {
              "type": "hash",
              "required": 0,
              "name": "fields_attributes",
              "description": "The profile fields to be set. Inside this hash, the key is an integer cast to a string (although the exact integer does not matter), and the value is another hash including `name` and `value`. By default, max 4 fields.",
              "nullable": 0
            }
          ]
        },
        "statuses": {
          "formParams": [],
          "returnsArray": 1,
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "name": "id",
              "description": "The ID of the Account in the database.",
              "nullable": 0
            }
          ],
          "method": "GET",
          "name": "statuses",
          "queryParams": [
            {
              "description": "Return results older than this ID",
              "name": "max_id ",
              "nullable": 0,
              "type": "string",
              "required": 0
            },
            {
              "nullable": 0,
              "description": "Return results newer than this ID",
              "name": "since_id",
              "required": 0,
              "type": "string"
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "description": "Return results immediately newer than this ID",
              "name": "min_id"
            },
            {
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
              "required": 0,
              "type": "integer"
            },
            {
              "nullable": 0,
              "name": "only_media",
              "description": "Filter out statuses without attachments.",
              "type": "boolean",
              "required": 0
            },
            {
              "required": 0,
              "type": "boolean",
              "nullable": 0,
              "name": "exclude_replies",
              "description": "Filter out statuses in reply to a different account."
            },
            {
              "nullable": 0,
              "description": "Filter out boosts from the response.",
              "name": "exclude_reblogs",
              "required": 0,
              "type": "boolean"
            },
            {
              "required": 0,
              "type": "boolean",
              "name": "pinned",
              "description": "Filter for pinned statuses only. Defaults to false, which includes all statuses. Pinned statuses do not receive special priority in the order of the returned results.",
              "nullable": 0
            },
            {
              "type": "string",
              "required": 0,
              "description": "Filter for statuses using a specific hashtag.",
              "name": "tagged",
              "nullable": 0
            }
          ],
          "description": "Get account's statuses",
          "returns": "Status",
          "uri": "/api/v1/accounts/:id/statuses",
          "namespace": "accounts"
        },
        "mute": {
          "method": "POST",
          "description": "Mute account",
          "queryParams": [],
          "name": "mute",
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Account in the database.",
              "required": 1,
              "type": "string"
            }
          ],
          "uri": "/api/v1/accounts/:id/mute",
          "namespace": "accounts",
          "returns": "Relationship",
          "formParams": [
            {
              "required": 0,
              "type": "boolean",
              "description": "Mute notifications in addition to statuses? Defaults to true.",
              "name": "notifications",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "integer",
              "description": "How long the mute should last, in seconds. Defaults to 0 (indefinite).",
              "name": "duration",
              "nullable": 0
            }
          ],
          "returnsArray": 1
        },
        "featured_tags": {
          "queryParams": [],
          "description": "Get account's featured tags",
          "name": "featured_tags",
          "method": "GET",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Account in the database."
            }
          ],
          "uri": "/api/v1/accounts/:id/featured_tags",
          "namespace": "accounts",
          "returns": "FeaturedTag",
          "formParams": [],
          "returnsArray": 1
        },
        "unfollow": {
          "returns": "Relationship",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id/unfollow",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Account in the database.",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "method": "POST",
          "queryParams": [],
          "name": "unfollow",
          "description": "Unfollow account",
          "returnsArray": 1,
          "formParams": []
        },
        "unpin": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Relationship",
          "uri": "/api/v1/accounts/:id/unpin",
          "namespace": "accounts",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "name": "id",
              "description": "The ID of the Account in the database.",
              "nullable": 0
            }
          ],
          "name": "unpin",
          "queryParams": [],
          "description": "Unfeature account from profile",
          "method": "POST"
        },
        "search": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Account",
          "uri": "/api/v1/accounts/search",
          "namespace": "accounts",
          "pathParams": [],
          "method": "GET",
          "queryParams": [
            {
              "required": 1,
              "type": "string",
              "name": "q",
              "description": "Search query for accounts.",
              "nullable": 0
            },
            {
              "description": "Maximum number of results. Defaults to 40 accounts. Max 80 accounts.",
              "name": "limit",
              "nullable": 0,
              "required": 0,
              "type": "integer"
            },
            {
              "required": 0,
              "type": "integer",
              "nullable": 0,
              "name": "offset",
              "description": "Skip the first n results."
            },
            {
              "type": "boolean",
              "required": 0,
              "nullable": 0,
              "description": "Attempt WebFinger lookup. Defaults to false. Use this when `q` is an exact address.",
              "name": "resolve"
            },
            {
              "required": 0,
              "type": "boolean",
              "description": "Limit the search to users you are following. Defaults to false.",
              "name": "following",
              "nullable": 0
            }
          ],
          "name": "search",
          "description": "Search for matching accounts"
        },
        "unmute": {
          "formParams": [],
          "returnsArray": 1,
          "pathParams": [
            {
              "description": "The ID of the Account in the database.",
              "name": "id",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "method": "POST",
          "name": "unmute",
          "queryParams": [],
          "description": "Unmute account",
          "returns": "Relationship",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id/unmute"
        },
        "remove_from_followers": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id/remove_from_followers",
          "returns": "Relationship",
          "queryParams": [],
          "name": "remove_from_followers",
          "description": "Remove account from followers",
          "method": "POST",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Account in the database."
            }
          ]
        },
        "identity_proofs": {
          "pathParams": [
            {
              "description": "The ID of the Account in the database.",
              "name": "id",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "method": "GET",
          "description": "(DEPRECATED) Identity proofs",
          "queryParams": [],
          "name": "identity_proofs",
          "returns": "IdentityProof",
          "uri": "/api/v1/accounts/:id/identity_proofs",
          "namespace": "accounts",
          "formParams": [],
          "returnsArray": 1
        },
        "lists": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "List",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id/lists",
          "pathParams": [
            {
              "nullable": 0,
              "description": "The ID of the Account in the database.",
              "name": "id",
              "required": 1,
              "type": "string"
            }
          ],
          "description": "Get lists containing this account",
          "queryParams": [],
          "name": "lists",
          "method": "GET"
        },
        "followers": {
          "formParams": [],
          "returnsArray": 1,
          "description": "Get account's followers",
          "queryParams": [
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
              "name": "limit"
            }
          ],
          "name": "followers",
          "method": "GET",
          "pathParams": [
            {
              "nullable": 0,
              "description": "The ID of the Account in the database.",
              "name": "id",
              "required": 1,
              "type": "string"
            }
          ],
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id/followers",
          "returns": "Account"
        },
        "pin": {
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Account in the database."
            }
          ],
          "queryParams": [],
          "name": "pin",
          "description": "Feature account on your profile",
          "method": "POST",
          "returns": "Relationship",
          "namespace": "accounts",
          "uri": "/api/v1/accounts/:id/pin",
          "formParams": [],
          "returnsArray": 1
        }
      },
      "description": "Methods concerning accounts and profiles."
    },
    "instance": {
      "methods": {
        "domain_blocks": {
          "method": "GET",
          "queryParams": [],
          "name": "domain_blocks",
          "description": "View moderated servers",
          "pathParams": [],
          "uri": "/api/v1/instance/domain_blocks",
          "namespace": "instance",
          "returns": "DomainBlock",
          "formParams": [],
          "returnsArray": 1
        },
        "extended_description": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "ExtendedDescription",
          "uri": "/api/v1/instance/extended_description",
          "namespace": "instance",
          "pathParams": [],
          "method": "GET",
          "name": "extended_description",
          "queryParams": [],
          "description": "View extended description"
        },
        "v2": {
          "pathParams": [],
          "queryParams": [],
          "name": "v2",
          "description": "View server information",
          "method": "GET",
          "returns": "Instance",
          "uri": "/api/v2/instance",
          "namespace": "instance",
          "formParams": [],
          "returnsArray": null
        },
        "rules": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "instance",
          "uri": "/api/v1/instance/rules",
          "returns": "Rule",
          "method": "GET",
          "description": "List of rules",
          "queryParams": [],
          "name": "rules",
          "pathParams": []
        },
        "v1": {
          "pathParams": [],
          "method": "GET",
          "queryParams": [],
          "name": "v1",
          "description": "(DEPRECATED) View server information (V1)",
          "returns": "V1::Instance",
          "namespace": "instance",
          "uri": "/api/v1/instance",
          "formParams": [],
          "returnsArray": 1
        },
        "peers": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "instance",
          "uri": "/api/v1/instance/peers",
          "returns": "EmptyOrUnknown",
          "method": "GET",
          "description": "List of connected domains",
          "queryParams": [],
          "name": "peers",
          "pathParams": []
        },
        "activity": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "EmptyOrUnknown",
          "uri": "/api/v1/instance/activity",
          "namespace": "instance",
          "pathParams": [],
          "method": "GET",
          "queryParams": [],
          "name": "activity",
          "description": "Weekly activity"
        }
      },
      "description": "Discover information about a Mastodon website."
    },
    "follow_requests": {
      "description": "View and manage follow requests.",
      "methods": {
        "accept": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Relationship",
          "namespace": "follow_requests",
          "uri": "/api/v1/follow_requests/:account_id/authorize",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "account_id",
              "description": "The ID of the Account in the database."
            }
          ],
          "method": "POST",
          "queryParams": [],
          "description": "Accept follow request",
          "name": "accept"
        },
        "get": {
          "formParams": [],
          "returnsArray": 1,
          "pathParams": [],
          "method": "GET",
          "queryParams": [
            {
              "nullable": 0,
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
              "name": "limit",
              "required": 0,
              "type": "integer"
            }
          ],
          "name": "get",
          "description": "View pending follow requests",
          "returns": "Account",
          "uri": "/api/v1/follow_requests",
          "namespace": "follow_requests"
        },
        "reject": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "follow_requests",
          "uri": "/api/v1/follow_requests/:account_id/reject",
          "returns": "Relationship",
          "method": "POST",
          "queryParams": [],
          "description": "Reject follow request",
          "name": "reject",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "nullable": 0,
              "name": "account_id",
              "description": "The ID of the Account in the database."
            }
          ]
        }
      }
    },
    "emails": {
      "methods": {
        "confirmation": {
          "method": "POST",
          "description": "Resend confirmation email",
          "queryParams": [],
          "name": "confirmation",
          "pathParams": [],
          "uri": "/api/v1/emails/confirmation",
          "namespace": "emails",
          "returns": "EmptyOrUnknown",
          "formParams": [],
          "returnsArray": null
        }
      },
      "description": "Request a new confirmation email, potentially to a new email address."
    },
    "preferences": {
      "description": "Preferred common behaviors to be shared across clients.",
      "methods": {
        "get": {
          "returns": "Preferences",
          "uri": "/api/v1/preferences",
          "namespace": "preferences",
          "pathParams": [],
          "method": "GET",
          "queryParams": [],
          "description": "View user preferences",
          "name": "get",
          "returnsArray": null,
          "formParams": []
        }
      }
    },
    "streaming": {
      "description": " Subscribe to server-sent events for real-time updates via a long-lived HTTP connection or via WebSocket.",
      "methods": {
        "health": {
          "formParams": [],
          "returnsArray": null,
          "pathParams": [],
          "method": "GET",
          "name": "health",
          "queryParams": [],
          "description": "Check if the server is alive",
          "returns": "EmptyOrUnknown",
          "uri": "/api/v1/streaming/health",
          "namespace": "streaming"
        }
      }
    },
    "admin": {
      "namespaces": {
        "admin::canonical_email_blocks": {
          "methods": {
            "get": {
              "returnsArray": 1,
              "formParams": [],
              "returns": "Admin::CanonicalEmailBlock",
              "namespace": "admin::canonical_email_blocks",
              "uri": "/api/v1/admin/canonical_email_blocks",
              "pathParams": [],
              "method": "GET",
              "queryParams": [
                {
                  "required": 0,
                  "type": "integer",
                  "name": "limit",
                  "description": "Maximum number of results to return. Defaults to 100 blocks. Max 200 blocks.",
                  "nullable": 0
                }
              ],
              "description": "List all canonical email blocks",
              "name": "get"
            },
            "delete": {
              "namespace": "admin::canonical_email_blocks",
              "uri": "/api/v1/admin/canonical_email_blocks/:id",
              "returns": "Admin::CanonicalEmailBlock",
              "method": "DELETE",
              "queryParams": [],
              "name": "delete",
              "description": "Delete a canonical email block",
              "pathParams": [
                {
                  "type": "string",
                  "required": 1,
                  "nullable": 0,
                  "description": "The ID of the Admin::CanonicalEmailBlock in the database.",
                  "name": "id"
                }
              ],
              "returnsArray": 1,
              "formParams": []
            },
            "get-one": {
              "returnsArray": 1,
              "formParams": [],
              "namespace": "admin::canonical_email_blocks",
              "uri": "/api/v1/admin/canonical_email_blocks/:id",
              "returns": "Admin::CanonicalEmailBlock",
              "method": "GET",
              "name": "get-one",
              "queryParams": [],
              "description": "Show a single canonical email block",
              "pathParams": [
                {
                  "nullable": 0,
                  "name": "id",
                  "description": "The ID of the Admin::CanonicalEmailBlock in the database.",
                  "type": "string",
                  "required": 1
                }
              ]
            },
            "create": {
              "returns": "Admin::CanonicalEmailBlock",
              "uri": "/api/v1/admin/canonical_email_blocks",
              "namespace": "admin::canonical_email_blocks",
              "pathParams": [],
              "queryParams": [],
              "name": "create",
              "description": "Block a canonical email",
              "method": "POST",
              "returnsArray": 1,
              "formParams": [
                {
                  "nullable": 0,
                  "description": "The email to canonicalize, hash, and block. If this parameter is provided, `canonical_email_hash` will be ignored.",
                  "name": "email",
                  "type": "string",
                  "required": 1
                },
                {
                  "required": 0,
                  "type": "string",
                  "description": "The hash to test against. If `email` is not provided, this parameter is required.",
                  "name": "canonical_email_hash",
                  "nullable": 0
                }
              ]
            },
            "test": {
              "uri": "/api/v1/admin/canonical_email_blocks/test",
              "namespace": "admin::canonical_email_blocks",
              "returns": "Admin::CanonicalEmailBlock",
              "queryParams": [],
              "description": "Test",
              "name": "test",
              "method": "POST",
              "pathParams": [],
              "returnsArray": 1,
              "formParams": [
                {
                  "description": "The email to canonicalize and hash.",
                  "name": "email",
                  "nullable": 0,
                  "type": "string",
                  "required": 1
                }
              ]
            }
          },
          "description": "Block certain email addresses by their hash."
        },
        "admin::email_domain_blocks": {
          "description": "Disallow certain email domains from signing up.",
          "methods": {
            "get-one": {
              "uri": "/api/v1/admin/email_domain_blocks/:id",
              "namespace": "admin::email_domain_blocks",
              "returns": "Admin::EmailDomainBlock",
              "queryParams": [],
              "description": "Get a single blocked email domain",
              "name": "get-one",
              "method": "GET",
              "pathParams": [
                {
                  "nullable": 0,
                  "description": "The ID of the DomainBlock in the database.",
                  "name": "id",
                  "required": 1,
                  "type": "string"
                }
              ],
              "returnsArray": 1,
              "formParams": []
            },
            "create": {
              "pathParams": [],
              "method": "POST",
              "queryParams": [],
              "name": "create",
              "description": "Block an email domain from signups",
              "returns": "Admin::EmailDomainBlock",
              "namespace": "admin::email_domain_blocks",
              "uri": "/api/v1/admin/email_domain_blocks",
              "formParams": [
                {
                  "name": "domain",
                  "description": "The domain to block federation with.",
                  "nullable": 0,
                  "required": 1,
                  "type": "string"
                }
              ],
              "returnsArray": 1
            },
            "delete": {
              "pathParams": [
                {
                  "nullable": 0,
                  "description": "The ID of the DomainAllow in the database.",
                  "name": "id",
                  "type": "string",
                  "required": 1
                }
              ],
              "queryParams": [],
              "description": "Delete an email domain block",
              "name": "delete",
              "method": "DELETE",
              "returns": "Admin::EmailDomainBlock",
              "uri": "/api/v1/admin/email_domain_blocks/:id",
              "namespace": "admin::email_domain_blocks",
              "formParams": [],
              "returnsArray": 1
            },
            "get": {
              "namespace": "admin::email_domain_blocks",
              "uri": "/api/v1/admin/email_domain_blocks",
              "returns": "Admin::EmailDomainBlock",
              "queryParams": [
                {
                  "name": "limit",
                  "description": "Maximum number of results to return. Defaults to 100 blocks. Max 200 blocks.",
                  "nullable": 0,
                  "required": 0,
                  "type": "integer"
                }
              ],
              "description": "List all blocked email domains",
              "name": "get",
              "method": "GET",
              "pathParams": [],
              "returnsArray": 1,
              "formParams": []
            }
          }
        },
        "admin::trends": {
          "methods": {
            "statuses": {
              "returnsArray": 1,
              "formParams": [],
              "namespace": "admin::trends",
              "uri": "/api/v1/admin/trends/statuses",
              "returns": "Status",
              "method": "GET",
              "name": "statuses",
              "queryParams": [],
              "description": "View trending statuses",
              "pathParams": []
            },
            "tags": {
              "method": "GET",
              "name": "tags",
              "queryParams": [],
              "description": "View trending tags",
              "pathParams": [],
              "namespace": "admin::trends",
              "uri": "/api/v1/admin/trends/tags",
              "returns": "Admin::Tag",
              "formParams": [],
              "returnsArray": 1
            },
            "links": {
              "formParams": [],
              "returnsArray": 1,
              "method": "GET",
              "queryParams": [],
              "name": "links",
              "description": "View trending links",
              "pathParams": [],
              "namespace": "admin::trends",
              "uri": "/api/v1/admin/trends/links",
              "returns": "Trends::Link"
            }
          },
          "description": "TODO"
        },
        "admin::reports": {
          "methods": {
            "get-one": {
              "formParams": [],
              "returnsArray": 1,
              "pathParams": [
                {
                  "description": "The ID of the Report in the database.",
                  "name": "id",
                  "nullable": 0,
                  "type": "string",
                  "required": 1
                }
              ],
              "method": "GET",
              "queryParams": [],
              "description": "View a single report",
              "name": "get-one",
              "returns": "Admin::Report",
              "uri": "/api/v1/admin/reports/:id",
              "namespace": "admin::reports"
            },
            "update": {
              "returns": "Admin::Report",
              "uri": "/api/v1/admin/reports/:id",
              "namespace": "admin::reports",
              "pathParams": [
                {
                  "name": "id",
                  "description": "The ID of the Report in the database.",
                  "nullable": 0,
                  "type": "string",
                  "required": 1
                }
              ],
              "method": "PUT",
              "queryParams": [],
              "description": "Update a report",
              "name": "update",
              "returnsArray": 1,
              "formParams": [
                {
                  "type": "string",
                  "required": 0,
                  "description": "Change the classification of the report to `spam`, `violation`, or `other`.",
                  "name": "category",
                  "nullable": 0
                },
                {
                  "type": "array<Integer>",
                  "required": 0,
                  "nullable": 0,
                  "name": "rule_ids[]",
                  "description": "For `violation` category reports, specify the ID of the exact rules broken. Rules and their IDs are available via [GET /api/v1/instance/rules]({{< relref \"methods/instance#rules\" >}}) and [GET /api/v1/instance]({{< relref \"methods/instance#get\" >}})."
                }
              ]
            },
            "assign_to_self": {
              "pathParams": [
                {
                  "required": 1,
                  "type": "string",
                  "nullable": 0,
                  "description": "The ID of the Report in the database.",
                  "name": "id"
                }
              ],
              "queryParams": [],
              "name": "assign_to_self",
              "description": "Assign report to self",
              "method": "POST",
              "returns": "Admin::Report",
              "uri": "/api/v1/admin/reports/:id/assign_to_self",
              "namespace": "admin::reports",
              "formParams": [],
              "returnsArray": 1
            },
            "reopen": {
              "returnsArray": 1,
              "formParams": [],
              "returns": "Admin::Report",
              "uri": "/api/v1/admin/reports/:id/reopen",
              "namespace": "admin::reports",
              "pathParams": [
                {
                  "name": "id",
                  "description": "The ID of the Report in the database.",
                  "nullable": 0,
                  "required": 1,
                  "type": "string"
                }
              ],
              "method": "POST",
              "queryParams": [],
              "description": "Reopen a closed report",
              "name": "reopen"
            },
            "resolve": {
              "queryParams": [],
              "name": "resolve",
              "description": "Mark report as resolved",
              "method": "POST",
              "pathParams": [
                {
                  "required": 1,
                  "type": "string",
                  "name": "id",
                  "description": "The ID of the Report in the database.",
                  "nullable": 0
                }
              ],
              "namespace": "admin::reports",
              "uri": "/api/v1/admin/reports/:id/resolve",
              "returns": "Admin::Report",
              "formParams": [],
              "returnsArray": 1
            },
            "unassign": {
              "pathParams": [
                {
                  "description": "The ID of the Report in the database.",
                  "name": "id",
                  "nullable": 0,
                  "required": 1,
                  "type": "string"
                }
              ],
              "method": "POST",
              "queryParams": [],
              "name": "unassign",
              "description": "Unassign report",
              "returns": "Admin::Report",
              "namespace": "admin::reports",
              "uri": "/api/v1/admin/reports/:id/unassign",
              "formParams": [],
              "returnsArray": 1
            },
            "get": {
              "returns": "Admin::Report",
              "uri": "/api/v1/admin/reports",
              "namespace": "admin::reports",
              "pathParams": [],
              "queryParams": [
                {
                  "type": "boolean",
                  "required": 0,
                  "nullable": 0,
                  "name": "resolved",
                  "description": "Filter for resolved reports?"
                },
                {
                  "nullable": 0,
                  "name": "account_id",
                  "description": "Filter for reports filed by this account.",
                  "required": 0,
                  "type": "string"
                },
                {
                  "type": "string",
                  "required": 0,
                  "nullable": 0,
                  "description": "Filter for reports targeting this account.",
                  "name": "target_account_id"
                },
                {
                  "nullable": 0,
                  "description": "Maximum number of results to return. Defaults to 100 reports. Max 200 reports.",
                  "name": "limit",
                  "type": "integer",
                  "required": 0
                }
              ],
              "description": "View all reports",
              "name": "get",
              "method": "GET",
              "returnsArray": 1,
              "formParams": []
            }
          },
          "description": "Perform moderation actions with reports."
        },
        "admin::dimensions": {
          "description": "Obtain qualitative metrics about the server.",
          "methods": {
            "get": {
              "returnsArray": 1,
              "formParams": [
                {
                  "required": 1,
                  "type": "array<String>",
                  "name": "keys[]",
                  "description": "Request specific dimensions by their keystring. Supported dimensions include:",
                  "nullable": 0
                },
                {
                  "nullable": 0,
                  "name": "start_at",
                  "description": "The start date for the time period. If a time is provided, it will be ignored.",
                  "type": "datetime",
                  "required": 0
                },
                {
                  "nullable": 0,
                  "name": "end_at",
                  "description": "The end date for the time period. If a time is provided, it will be ignored.",
                  "type": "datetime",
                  "required": 0
                },
                {
                  "type": "integer",
                  "required": 0,
                  "name": "limit",
                  "description": "The maximum number of results to return for sources, servers, languages, tag or instance dimensions.",
                  "nullable": 0
                }
              ],
              "returns": "Admin::Dimension",
              "namespace": "admin::dimensions",
              "uri": "/api/v1/admin/dimensions",
              "pathParams": [],
              "queryParams": [],
              "name": "get",
              "description": "Get dimensional data",
              "method": "POST"
            }
          }
        },
        "admin::retention": {
          "description": "Show retention data over time.",
          "methods": {
            "create": {
              "formParams": [
                {
                  "name": "start_at",
                  "description": "The start date for the time period. If a time is provided, it will be ignored.",
                  "nullable": 0,
                  "type": "datetime",
                  "required": 1
                },
                {
                  "nullable": 0,
                  "description": "The end date for the time period. If a time is provided, it will be ignored.",
                  "name": "end_at",
                  "required": 1,
                  "type": "datetime"
                },
                {
                  "description": "Specify whether to use `day` or `month` buckets. If any other value is provided, defaults to `day`.",
                  "name": "frequency",
                  "nullable": 0,
                  "required": 1,
                  "type": "string"
                }
              ],
              "returnsArray": 1,
              "pathParams": [],
              "name": "create",
              "queryParams": [],
              "description": "Calculate retention data",
              "method": "POST",
              "returns": "Admin::Cohort",
              "uri": "/api/v1/admin/retention",
              "namespace": "admin::retention"
            }
          }
        },
        "admin::ip_blocks": {
          "description": "Disallow certain IP address ranges from signing up.",
          "methods": {
            "update": {
              "returnsArray": 1,
              "formParams": [
                {
                  "description": "The IP address and prefix to block. Defaults to `0.0.0.0/32`",
                  "name": "ip",
                  "nullable": 0,
                  "required": 0,
                  "type": "string"
                },
                {
                  "nullable": 0,
                  "description": "The policy to apply to this IP range: `sign_up_requires_approval`, `sign_up_block`, or `no_access`",
                  "name": "severity",
                  "required": 0,
                  "type": "string"
                },
                {
                  "nullable": 0,
                  "name": "comment",
                  "description": "The reason for this IP block.",
                  "type": "string",
                  "required": 0
                },
                {
                  "description": "The number of seconds in which this IP block will expire.",
                  "name": "expires_in",
                  "nullable": 0,
                  "required": 0,
                  "type": "integer"
                }
              ],
              "returns": "Admin::IpBlock",
              "namespace": "admin::ip_blocks",
              "uri": "/api/v1/admin/ip_blocks/:id",
              "pathParams": [
                {
                  "type": "string",
                  "required": 1,
                  "nullable": 0,
                  "description": "The ID of the IpBlock in the database.",
                  "name": "id"
                }
              ],
              "queryParams": [],
              "description": "Update a domain block",
              "name": "update",
              "method": "PUT"
            },
            "get-one": {
              "formParams": [],
              "returnsArray": 1,
              "method": "GET",
              "queryParams": [],
              "name": "get-one",
              "description": "Get a single IP block",
              "pathParams": [
                {
                  "type": "string",
                  "required": 1,
                  "nullable": 0,
                  "description": "The ID of the IpBlock in the database.",
                  "name": "id"
                }
              ],
              "uri": "/api/v1/admin/ip_blocks/:id",
              "namespace": "admin::ip_blocks",
              "returns": "Admin::IpBlock"
            },
            "create": {
              "method": "POST",
              "name": "create",
              "queryParams": [],
              "description": "Block an IP address range from signing up",
              "pathParams": [],
              "namespace": "admin::ip_blocks",
              "uri": "/api/v1/admin/ip_blocks",
              "returns": "Admin::IpBlock",
              "formParams": [
                {
                  "required": 0,
                  "type": "string",
                  "description": "The IP address and prefix to block. Defaults to `0.0.0.0/32`",
                  "name": "ip",
                  "nullable": 0
                },
                {
                  "required": 1,
                  "type": "string",
                  "nullable": 0,
                  "name": "severity",
                  "description": "The policy to apply to this IP range: `sign_up_requires_approval`, `sign_up_block`, or `no_access`"
                },
                {
                  "required": 0,
                  "type": "string",
                  "nullable": 0,
                  "description": "The reason for this IP block.",
                  "name": "comment"
                },
                {
                  "required": 0,
                  "type": "integer",
                  "nullable": 0,
                  "description": "The number of seconds in which this IP block will expire.",
                  "name": "expires_in"
                }
              ],
              "returnsArray": 1
            },
            "get": {
              "returnsArray": 1,
              "formParams": [],
              "namespace": "admin::ip_blocks",
              "uri": "/api/v1/admin/ip_blocks",
              "returns": "Admin::IpBlock",
              "method": "GET",
              "description": "List all IP blocks",
              "queryParams": [
                {
                  "required": 0,
                  "type": "integer",
                  "description": "Maximum number of results to return. Defaults to 100 blocks. Max 200 blocks.",
                  "name": "limit",
                  "nullable": 0
                }
              ],
              "name": "get",
              "pathParams": []
            },
            "delete": {
              "returns": "Admin::IpBlock",
              "uri": "/api/v1/admin/ip_blocks/:id",
              "namespace": "admin::ip_blocks",
              "pathParams": [
                {
                  "type": "string",
                  "required": 1,
                  "description": "The ID of the DomainAllow in the database.",
                  "name": "id",
                  "nullable": 0
                }
              ],
              "name": "delete",
              "queryParams": [],
              "description": "Delete an IP block",
              "method": "DELETE",
              "returnsArray": 1,
              "formParams": []
            }
          }
        },
        "admin::domain_blocks": {
          "methods": {
            "get": {
              "namespace": "admin::domain_blocks",
              "uri": "/api/v1/admin/domain_blocks",
              "returns": "Admin::DomainBlock",
              "description": "List all blocked domains",
              "queryParams": [
                {
                  "nullable": 0,
                  "description": "Maximum number of results to return. Defaults to 100 blocks. Max 200 blocks.",
                  "name": "limit",
                  "type": "integer",
                  "required": 0
                }
              ],
              "name": "get",
              "method": "GET",
              "pathParams": [],
              "returnsArray": 1,
              "formParams": []
            },
            "delete": {
              "pathParams": [
                {
                  "name": "id",
                  "description": "The ID of the DomainAllow in the database.",
                  "nullable": 0,
                  "type": "string",
                  "required": 1
                }
              ],
              "name": "delete",
              "queryParams": [],
              "description": "Remove a domain block",
              "method": "DELETE",
              "returns": "Admin::DomainBlock",
              "uri": "/api/v1/admin/domain_blocks/:id",
              "namespace": "admin::domain_blocks",
              "formParams": [],
              "returnsArray": 1
            },
            "update": {
              "formParams": [
                {
                  "nullable": 0,
                  "name": "severity",
                  "description": "Whether to apply a `silence`, `suspend`, or `noop` to the domain. Defaults to `silence`",
                  "type": "string",
                  "required": 0
                },
                {
                  "nullable": 0,
                  "description": "Whether media attachments should be rejected. Defaults to false",
                  "name": "reject_media",
                  "required": 0,
                  "type": "boolean"
                },
                {
                  "description": "Whether reports from this domain should be rejected. Defaults to false",
                  "name": "reject_reports",
                  "nullable": 0,
                  "required": 0,
                  "type": "boolean"
                },
                {
                  "nullable": 0,
                  "description": "A private note about this domain block, visible only to admins.",
                  "name": "private_comment",
                  "required": 0,
                  "type": "string"
                },
                {
                  "name": "public_comment",
                  "description": "A public note about this domain block, optionally shown on the about page.",
                  "nullable": 0,
                  "type": "string",
                  "required": 0
                },
                {
                  "type": "boolean",
                  "required": 0,
                  "name": "obfuscate",
                  "description": "Whether to partially censor the domain when shown in public. Defaults to false",
                  "nullable": 0
                }
              ],
              "returnsArray": 1,
              "description": "Update a domain block",
              "queryParams": [],
              "name": "update",
              "method": "PUT",
              "pathParams": [
                {
                  "required": 1,
                  "type": "string",
                  "name": "id",
                  "description": "The ID of the DomainAllow in the database.",
                  "nullable": 0
                }
              ],
              "uri": "/api/v1/admin/domain_blocks/:id",
              "namespace": "admin::domain_blocks",
              "returns": "Admin::DomainBlock"
            },
            "get-one": {
              "formParams": [],
              "returnsArray": 1,
              "pathParams": [
                {
                  "type": "string",
                  "required": 1,
                  "name": "id",
                  "description": "The ID of the DomainBlock in the database.",
                  "nullable": 0
                }
              ],
              "method": "GET",
              "queryParams": [],
              "name": "get-one",
              "description": "Get a single blocked domain",
              "returns": "Admin::DomainBlock",
              "uri": "/api/v1/admin/domain_blocks/:id",
              "namespace": "admin::domain_blocks"
            },
            "create": {
              "formParams": [
                {
                  "nullable": 0,
                  "description": "The domain to block federation with.",
                  "name": "domain",
                  "required": 1,
                  "type": "string"
                },
                {
                  "type": "string",
                  "required": 0,
                  "name": "severity",
                  "description": "Whether to apply a `silence`, `suspend`, or `noop` to the domain. Defaults to `silence`",
                  "nullable": 0
                },
                {
                  "type": "boolean",
                  "required": 0,
                  "nullable": 0,
                  "name": "reject_media",
                  "description": "Whether media attachments should be rejected. Defaults to false"
                },
                {
                  "name": "reject_reports",
                  "description": "Whether reports from this domain should be rejected. Defaults to false",
                  "nullable": 0,
                  "required": 0,
                  "type": "boolean"
                },
                {
                  "description": "A private note about this domain block, visible only to admins.",
                  "name": "private_comment",
                  "nullable": 0,
                  "type": "string",
                  "required": 0
                },
                {
                  "required": 0,
                  "type": "string",
                  "name": "public_comment",
                  "description": "A public note about this domain block, optionally shown on the about page.",
                  "nullable": 0
                },
                {
                  "type": "boolean",
                  "required": 0,
                  "nullable": 0,
                  "name": "obfuscate",
                  "description": "Whether to partially censor the domain when shown in public. Defaults to false"
                }
              ],
              "returnsArray": 1,
              "method": "POST",
              "queryParams": [],
              "name": "create",
              "description": "Block a domain from federating",
              "pathParams": [],
              "uri": "/api/v1/admin/domain_blocks",
              "namespace": "admin::domain_blocks",
              "returns": "Admin::DomainBlock"
            }
          },
          "description": "Disallow certain domains to federate."
        },
        "admin::accounts": {
          "description": "Perform moderation actions with accounts.",
          "methods": {
            "delete": {
              "returnsArray": 1,
              "formParams": [],
              "returns": "Admin::Account",
              "namespace": "admin::accounts",
              "uri": "/api/v1/admin/accounts/:id",
              "pathParams": [
                {
                  "required": 1,
                  "type": "string",
                  "name": "id",
                  "description": "The ID of the Account in the database.",
                  "nullable": 0
                }
              ],
              "description": "Delete an account",
              "queryParams": [],
              "name": "delete",
              "method": "DELETE"
            },
            "unsuspend": {
              "formParams": [],
              "returnsArray": 1,
              "pathParams": [
                {
                  "required": 1,
                  "type": "string",
                  "nullable": 0,
                  "name": "id",
                  "description": "The ID of the Account in the database."
                }
              ],
              "method": "POST",
              "queryParams": [],
              "name": "unsuspend",
              "description": "Unsuspend an account",
              "returns": "Admin::Account",
              "namespace": "admin::accounts",
              "uri": "/api/v1/admin/accounts/:id/unsuspend"
            },
            "unsilence": {
              "returnsArray": 1,
              "formParams": [],
              "returns": "Admin::Account",
              "namespace": "admin::accounts",
              "uri": "/api/v1/admin/accounts/:id/unsilence",
              "pathParams": [
                {
                  "required": 1,
                  "type": "string",
                  "nullable": 0,
                  "description": "The ID of the Account in the database.",
                  "name": "id"
                }
              ],
              "name": "unsilence",
              "queryParams": [],
              "description": "Unsilence an account",
              "method": "POST"
            },
            "v1": {
              "method": "GET",
              "queryParams": [
                {
                  "name": "local",
                  "description": "Filter for local accounts?",
                  "nullable": 0,
                  "type": "boolean",
                  "required": 0
                },
                {
                  "type": "boolean",
                  "required": 0,
                  "name": "remote",
                  "description": "Filter for remote accounts?",
                  "nullable": 0
                },
                {
                  "nullable": 0,
                  "name": "active",
                  "description": "Filter for currently active accounts?",
                  "type": "boolean",
                  "required": 0
                },
                {
                  "type": "boolean",
                  "required": 0,
                  "description": "Filter for currently pending accounts?",
                  "name": "pending",
                  "nullable": 0
                },
                {
                  "type": "boolean",
                  "required": 0,
                  "name": "disabled",
                  "description": "Filter for currently disabled accounts?",
                  "nullable": 0
                },
                {
                  "description": "Filter for currently silenced accounts?",
                  "name": "silenced",
                  "nullable": 0,
                  "type": "boolean",
                  "required": 0
                },
                {
                  "type": "boolean",
                  "required": 0,
                  "description": "Filter for currently suspended accounts?",
                  "name": "suspended",
                  "nullable": 0
                },
                {
                  "required": 0,
                  "type": "boolean",
                  "name": "sensitized",
                  "description": "Filter for accounts force-marked as sensitive?",
                  "nullable": 0
                },
                {
                  "required": 0,
                  "type": "string",
                  "nullable": 0,
                  "description": "Search for the given username",
                  "name": "username"
                },
                {
                  "nullable": 0,
                  "description": "Search for the given display name",
                  "name": "display_name",
                  "type": "string",
                  "required": 0
                },
                {
                  "required": 0,
                  "type": "string",
                  "description": "Filter by the given domain",
                  "name": "by_domain",
                  "nullable": 0
                },
                {
                  "type": "string",
                  "required": 0,
                  "nullable": 0,
                  "name": "email",
                  "description": "Lookup a user with this email"
                },
                {
                  "required": 0,
                  "type": "string",
                  "nullable": 0,
                  "description": "Lookup users with this IP address",
                  "name": "ip"
                },
                {
                  "type": "boolean",
                  "required": 0,
                  "name": "staff",
                  "description": "Filter for staff accounts?",
                  "nullable": 0
                },
                {
                  "nullable": 0,
                  "description": "Return results older than ID.",
                  "name": "max_id ",
                  "required": 0,
                  "type": "string"
                },
                {
                  "name": "since_id",
                  "description": "Return results newer than ID.",
                  "nullable": 0,
                  "type": "string",
                  "required": 0
                },
                {
                  "nullable": 0,
                  "name": "min_id",
                  "description": "Return results immediately newer than ID.",
                  "required": 0,
                  "type": "string"
                },
                {
                  "name": "limit",
                  "description": "Maximum number of results to return. Defaults to 100 accounts. Max 200 accounts.",
                  "nullable": 0,
                  "required": 0,
                  "type": "integer"
                }
              ],
              "description": "View accounts (v1)",
              "name": "v1",
              "pathParams": [],
              "namespace": "admin::accounts",
              "uri": "/api/v1/admin/accounts",
              "returns": "Admin::Account",
              "formParams": [],
              "returnsArray": 1
            },
            "get-one": {
              "pathParams": [
                {
                  "required": 1,
                  "type": "string",
                  "nullable": 0,
                  "name": "id",
                  "description": "The ID of the Account in the database."
                }
              ],
              "queryParams": [],
              "name": "get-one",
              "description": "View a specific account",
              "method": "GET",
              "returns": "Admin::Account",
              "namespace": "admin::accounts",
              "uri": "/api/v1/admin/accounts/:id",
              "formParams": [],
              "returnsArray": 1
            },
            "v2": {
              "returns": "Admin::Account",
              "uri": "/api/v2/admin/accounts",
              "namespace": "admin::accounts",
              "pathParams": [],
              "queryParams": [
                {
                  "nullable": 0,
                  "name": "origin",
                  "description": "Filter for `local` or `remote` accounts.",
                  "required": 0,
                  "type": "string"
                },
                {
                  "type": "string",
                  "required": 0,
                  "description": "Filter for `active`, `pending`, `disabled`, `silenced`, or `suspended` accounts.",
                  "name": "status",
                  "nullable": 0
                },
                {
                  "type": "string",
                  "required": 0,
                  "name": "permissions",
                  "description": "Filter for accounts with `staff` permissions (users that can manage reports).",
                  "nullable": 0
                },
                {
                  "required": 0,
                  "type": "array<String>",
                  "name": "role_ids[]",
                  "description": "Filter for users with these roles.",
                  "nullable": 0
                },
                {
                  "nullable": 0,
                  "name": "invited_by",
                  "description": "Lookup users invited by the account with this ID.",
                  "required": 0,
                  "type": "string"
                },
                {
                  "type": "string",
                  "required": 0,
                  "name": "username",
                  "description": "Search for the given username.",
                  "nullable": 0
                },
                {
                  "name": "display_name",
                  "description": "Search for the given display name.",
                  "nullable": 0,
                  "required": 0,
                  "type": "string"
                },
                {
                  "type": "string",
                  "required": 0,
                  "name": "by_domain",
                  "description": "Filter by the given domain.",
                  "nullable": 0
                },
                {
                  "nullable": 0,
                  "name": "email",
                  "description": "Lookup a user with this email.",
                  "required": 0,
                  "type": "string"
                },
                {
                  "nullable": 0,
                  "description": "Lookup users with this IP address.",
                  "name": "ip",
                  "required": 0,
                  "type": "string"
                },
                {
                  "name": "max_id ",
                  "description": "Return results older than ID.",
                  "nullable": 0,
                  "type": "string",
                  "required": 0
                },
                {
                  "required": 0,
                  "type": "string",
                  "nullable": 0,
                  "name": "since_id",
                  "description": "Return results newer than ID."
                },
                {
                  "name": "min_id",
                  "description": "Return results immediately newer than ID.",
                  "nullable": 0,
                  "type": "string",
                  "required": 0
                },
                {
                  "type": "integer",
                  "required": 0,
                  "name": "limit",
                  "description": "Maximum number of results to return. Defaults to 100 accounts. Max 200 accounts.",
                  "nullable": 0
                }
              ],
              "name": "v2",
              "description": "View accounts (v2)",
              "method": "GET",
              "returnsArray": 1,
              "formParams": []
            },
            "enable": {
              "uri": "/api/v1/admin/accounts/:id/enable",
              "namespace": "admin::accounts",
              "returns": "Admin::Account",
              "method": "POST",
              "description": "Enable a currently disabled account",
              "queryParams": [],
              "name": "enable",
              "pathParams": [
                {
                  "name": "id",
                  "description": "The ID of the Account in the database.",
                  "nullable": 0,
                  "required": 1,
                  "type": "string"
                }
              ],
              "returnsArray": 1,
              "formParams": []
            },
            "unsensitive": {
              "pathParams": [
                {
                  "name": "id",
                  "description": "The ID of the Account in the database.",
                  "nullable": 0,
                  "type": "string",
                  "required": 1
                }
              ],
              "method": "POST",
              "queryParams": [],
              "name": "unsensitive",
              "description": "Unmark an account as sensitive",
              "returns": "Admin::Account",
              "uri": "/api/v1/admin/accounts/:id/unsensitive",
              "namespace": "admin::accounts",
              "formParams": [],
              "returnsArray": 1
            },
            "approve": {
              "returns": "Admin::Account",
              "namespace": "admin::accounts",
              "uri": "/api/v1/admin/accounts/:id/approve",
              "pathParams": [
                {
                  "required": 1,
                  "type": "string",
                  "nullable": 0,
                  "description": "The ID of the Account in the database.",
                  "name": "id"
                }
              ],
              "method": "POST",
              "description": "Approve a pending account",
              "queryParams": [],
              "name": "approve",
              "returnsArray": 1,
              "formParams": []
            },
            "reject": {
              "uri": "/api/v1/admin/accounts/:id/reject",
              "namespace": "admin::accounts",
              "returns": "Admin::Account",
              "name": "reject",
              "queryParams": [],
              "description": "Reject a pending account",
              "method": "POST",
              "pathParams": [
                {
                  "description": "The ID of the Account in the database.",
                  "name": "id",
                  "nullable": 0,
                  "required": 1,
                  "type": "string"
                }
              ],
              "returnsArray": 1,
              "formParams": []
            },
            "action": {
              "method": "POST",
              "queryParams": [],
              "description": "Perform an action against an account",
              "name": "action",
              "pathParams": [
                {
                  "type": "string",
                  "required": 1,
                  "name": "id",
                  "description": "The ID of the Account in the database.",
                  "nullable": 0
                }
              ],
              "uri": "/api/v1/admin/accounts/:id/action",
              "namespace": "admin::accounts",
              "returns": "EmptyOrUnknown",
              "formParams": [
                {
                  "required": 1,
                  "type": "string",
                  "description": "The type of action to be taken: `none`, `sensitive`, `disable`, `silence`, or `suspend`.",
                  "name": "type",
                  "nullable": 0
                },
                {
                  "required": 0,
                  "type": "string",
                  "nullable": 0,
                  "name": "report_id",
                  "description": "The ID of an associated report that caused this action to be taken."
                },
                {
                  "type": "string",
                  "required": 0,
                  "description": "The ID of a preset warning.",
                  "name": "warning_preset_id",
                  "nullable": 0
                },
                {
                  "type": "string",
                  "required": 0,
                  "nullable": 0,
                  "name": "text",
                  "description": "Additional clarification for why this action was taken."
                },
                {
                  "name": "send_email_notification",
                  "description": "Should an email be sent to the user with the above information?",
                  "nullable": 0,
                  "type": "boolean",
                  "required": 0
                }
              ],
              "returnsArray": 1
            }
          }
        },
        "admin::domain_allows": {
          "description": "Allow certain domains to federate.",
          "methods": {
            "create": {
              "pathParams": [],
              "method": "POST",
              "queryParams": [],
              "name": "create",
              "description": "Allow a domain to federate",
              "returns": "Admin::DomainAllow",
              "namespace": "admin::domain_allows",
              "uri": "/api/v1/admin/domain_allows",
              "formParams": [
                {
                  "required": 1,
                  "type": "string",
                  "nullable": 0,
                  "name": "domain",
                  "description": "The domain to allow federation with."
                }
              ],
              "returnsArray": 1
            },
            "get-one": {
              "returnsArray": 1,
              "formParams": [],
              "returns": "Admin::DomainAllow",
              "uri": "/api/v1/admin/domain_allows/:id",
              "namespace": "admin::domain_allows",
              "pathParams": [
                {
                  "nullable": 0,
                  "name": "id",
                  "description": "The ID of the DomainAllow in the database.",
                  "type": "string",
                  "required": 1
                }
              ],
              "queryParams": [],
              "description": "Get a single allowed domain",
              "name": "get-one",
              "method": "GET"
            },
            "delete": {
              "returnsArray": 1,
              "formParams": [],
              "uri": "/api/v1/admin/domain_allows/:id",
              "namespace": "admin::domain_allows",
              "returns": "Admin::DomainAllow",
              "queryParams": [],
              "name": "delete",
              "description": "Delete an allowed domain",
              "method": "DELETE",
              "pathParams": [
                {
                  "name": "id",
                  "description": "The ID of the DomainAllow in the database.",
                  "nullable": 0,
                  "type": "string",
                  "required": 1
                }
              ]
            },
            "get": {
              "uri": "/api/v1/admin/domain_allows",
              "namespace": "admin::domain_allows",
              "returns": "Admin::DomainAllow",
              "method": "GET",
              "queryParams": [
                {
                  "description": "Maximum number of results to return. Defaults to 100 allows. Max 200 allows.",
                  "name": "limit",
                  "nullable": 0,
                  "required": 0,
                  "type": "integer"
                }
              ],
              "name": "get",
              "description": "List all allowed domains",
              "pathParams": [],
              "returnsArray": 1,
              "formParams": []
            }
          }
        },
        "admin::measures": {
          "methods": {
            "get": {
              "name": "get",
              "queryParams": [],
              "description": "Get measurable data",
              "method": "POST",
              "pathParams": [],
              "uri": "/api/v1/admin/measures",
              "namespace": "admin::measures",
              "returns": "Admin::Measure",
              "formParams": [
                {
                  "description": "Request specific measures by their keystring. Supported measures include:",
                  "name": "keys[]",
                  "nullable": 0,
                  "type": "array<String>",
                  "required": 1
                },
                {
                  "type": "datetime",
                  "required": 1,
                  "nullable": 0,
                  "name": "start_at",
                  "description": "The start date for the time period. If a time is provided, it will be ignored."
                },
                {
                  "nullable": 0,
                  "name": "end_at",
                  "description": "The end date for the time period. If a time is provided, it will be ignored.",
                  "required": 1,
                  "type": "datetime"
                }
              ],
              "returnsArray": 1
            }
          },
          "description": "Obtain quantitative metrics about the server."
        }
      }
    },
    "suggestions": {
      "description": " Server-generated suggestions on who to follow, based on previous positive interactions.",
      "methods": {
        "v2": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Suggestion",
          "namespace": "suggestions",
          "uri": "/api/v2/suggestions",
          "pathParams": [],
          "method": "GET",
          "description": "View follow suggestions (v2)",
          "queryParams": [
            {
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
              "name": "limit",
              "nullable": 0,
              "required": 0,
              "type": "integer"
            }
          ],
          "name": "v2"
        },
        "v1": {
          "formParams": [],
          "returnsArray": 1,
          "description": "(DEPRECATED) View follow suggestions (v1)",
          "queryParams": [
            {
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
              "type": "integer",
              "required": 0
            }
          ],
          "name": "v1",
          "method": "GET",
          "pathParams": [],
          "namespace": "suggestions",
          "uri": "/api/v1/suggestions",
          "returns": "Account"
        },
        "remove": {
          "formParams": [],
          "returnsArray": 1,
          "method": "DELETE",
          "name": "remove",
          "queryParams": [],
          "description": "Remove a suggestion",
          "pathParams": [
            {
              "name": "account_id",
              "description": "The ID of the Account in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "namespace": "suggestions",
          "uri": "/api/v1/suggestions/:account_id",
          "returns": "EmptyOrUnknown"
        }
      }
    },
    "scheduled_statuses": {
      "description": "Manage statuses that were scheduled to be published at a future date.",
      "methods": {
        "get": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "ScheduledStatus",
          "uri": "/api/v1/scheduled_statuses",
          "namespace": "scheduled_statuses",
          "pathParams": [],
          "method": "GET",
          "description": "View scheduled statuses",
          "queryParams": [
            {
              "nullable": 0,
              "name": "max_id ",
              "description": "Return results older than ID.",
              "required": 0,
              "type": "string"
            },
            {
              "description": "Return results newer than ID.",
              "name": "since_id",
              "nullable": 0,
              "required": 0,
              "type": "string"
            },
            {
              "description": "Return results immediately newer than ID.",
              "name": "min_id",
              "nullable": 0,
              "required": 0,
              "type": "string"
            },
            {
              "type": "integer",
              "required": 0,
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
              "name": "limit",
              "nullable": 0
            }
          ],
          "name": "get"
        },
        "cancel": {
          "returnsArray": 1,
          "formParams": [],
          "uri": "/api/v1/scheduled_statuses/:id",
          "namespace": "scheduled_statuses",
          "returns": "EmptyOrUnknown",
          "method": "DELETE",
          "queryParams": [],
          "name": "cancel",
          "description": "Cancel a scheduled status",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "name": "id",
              "description": "The ID of the ScheduledStatus in the database.",
              "nullable": 0
            }
          ]
        },
        "get-one": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "ScheduledStatus",
          "uri": "/api/v1/scheduled_statuses/:id",
          "namespace": "scheduled_statuses",
          "pathParams": [
            {
              "description": "The ID of the ScheduledStatus in the database.",
              "name": "id",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "queryParams": [],
          "description": "View a single scheduled status",
          "name": "get-one",
          "method": "GET"
        },
        "update": {
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The ID of the ScheduledStatus in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "method": "PUT",
          "description": "Update a scheduled status's publishing date",
          "queryParams": [],
          "name": "update",
          "returns": "ScheduledStatus",
          "namespace": "scheduled_statuses",
          "uri": "/api/v1/scheduled_statuses/:id",
          "formParams": [
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "name": "scheduled_at",
              "description": "ISO 8601 Datetime at which the status will be published. Must be at least 5 minutes into the future."
            }
          ],
          "returnsArray": 1
        }
      }
    },
    "notifications": {
      "description": "Receive notifications for activity on your account or statuses.",
      "methods": {
        "dismiss": {
          "uri": "/api/v1/notifications/:id/dismiss",
          "namespace": "notifications",
          "returns": "EmptyOrUnknown",
          "method": "POST",
          "queryParams": [],
          "name": "dismiss",
          "description": "Dismiss a single notification",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Notification in the database."
            }
          ],
          "returnsArray": 1,
          "formParams": []
        },
        "get-one": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "notifications",
          "uri": "/api/v1/notifications/:id",
          "returns": "Notification",
          "queryParams": [],
          "description": "Get a single notification",
          "name": "get-one",
          "method": "GET",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "name": "id",
              "description": "The ID of the Notification in the database.",
              "nullable": 0
            }
          ]
        },
        "dismiss-deprecated": {
          "pathParams": [],
          "method": "POST",
          "queryParams": [],
          "description": "(REMOVED) Dismiss a single notification",
          "name": "dismiss-deprecated",
          "returns": "EmptyOrUnknown",
          "namespace": "notifications",
          "uri": "/api/v1/notifications/dismiss",
          "formParams": [
            {
              "description": "The ID of the notification in the database.",
              "name": "id",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "returnsArray": 1
        },
        "get": {
          "queryParams": [
            {
              "type": "string",
              "required": 0,
              "nullable": 0,
              "description": "Return results older than this ID",
              "name": "max_id "
            },
            {
              "nullable": 0,
              "description": "Return results newer than this ID",
              "name": "since_id",
              "type": "string",
              "required": 0
            },
            {
              "type": "string",
              "required": 0,
              "nullable": 0,
              "name": "min_id",
              "description": "Return results immediately newer than this ID"
            },
            {
              "required": 0,
              "type": "integer",
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 15 notifications. Max 30 notifications."
            },
            {
              "nullable": 0,
              "name": "types[]",
              "description": "Types to include in the result.",
              "type": "array<String>",
              "required": 0
            },
            {
              "nullable": 0,
              "name": "exclude_types[]",
              "description": "Types to exclude from the results.",
              "type": "array<String>",
              "required": 0
            },
            {
              "nullable": 0,
              "description": "Return only notifications received from the specified account.",
              "name": "account_id",
              "type": "string",
              "required": 0
            }
          ],
          "description": "Get all notifications",
          "name": "get",
          "method": "GET",
          "pathParams": [],
          "namespace": "notifications",
          "uri": "/api/v1/notifications",
          "returns": "Notification",
          "formParams": [],
          "returnsArray": 1
        },
        "clear": {
          "formParams": [],
          "returnsArray": 1,
          "method": "POST",
          "queryParams": [],
          "description": "Dismiss all notifications",
          "name": "clear",
          "pathParams": [],
          "uri": "/api/v1/notifications/clear",
          "namespace": "notifications",
          "returns": "EmptyOrUnknown"
        }
      }
    },
    "favourites": {
      "description": "View your favourites. See also statuses/:id/{favourite,unfavourite}",
      "methods": {
        "get": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Status",
          "uri": "/api/v1/favourites",
          "namespace": "favourites",
          "pathParams": [],
          "queryParams": [
            {
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
              "nullable": 0,
              "required": 0,
              "type": "integer"
            }
          ],
          "description": "View favourited statuses",
          "name": "get",
          "method": "GET"
        }
      }
    },
    "endorsements": {
      "methods": {
        "get": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Account",
          "namespace": "endorsements",
          "uri": "/api/v1/endorsements",
          "pathParams": [],
          "method": "GET",
          "name": "get",
          "queryParams": [
            {
              "nullable": 0,
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
              "name": "limit",
              "type": "integer",
              "required": 0
            }
          ],
          "description": "View currently featured profiles"
        }
      },
      "description": "Feature other profiles on your own profile. See also accounts/:id/{pin,unpin}"
    },
    "domain_blocks": {
      "description": "Manage a user's blocked domains.",
      "methods": {
        "block": {
          "formParams": [
            {
              "type": "string",
              "required": 1,
              "description": "Domain to block.",
              "name": "domain",
              "nullable": 0
            }
          ],
          "returnsArray": 1,
          "description": "Block a domain",
          "queryParams": [],
          "name": "block",
          "method": "POST",
          "pathParams": [],
          "uri": "/api/v1/domain_blocks",
          "namespace": "domain_blocks",
          "returns": "EmptyOrUnknown"
        },
        "unblock": {
          "returnsArray": 1,
          "formParams": [
            {
              "type": "string",
              "required": 1,
              "description": "Domain to unblock.",
              "name": "domain",
              "nullable": 0
            }
          ],
          "uri": "/api/v1/domain_blocks",
          "namespace": "domain_blocks",
          "returns": "EmptyOrUnknown",
          "queryParams": [],
          "description": "Unblock a domain",
          "name": "unblock",
          "method": "DELETE",
          "pathParams": []
        },
        "get": {
          "returns": "EmptyOrUnknown",
          "namespace": "domain_blocks",
          "uri": "/api/v1/domain_blocks",
          "pathParams": [],
          "method": "GET",
          "name": "get",
          "queryParams": [
            {
              "required": 0,
              "type": "integer",
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 100 domain blocks. Max 200 domain blocks."
            }
          ],
          "description": "Get domain blocks",
          "returnsArray": 1,
          "formParams": []
        }
      }
    },
    "custom_emojis": {
      "methods": {
        "get": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "custom_emojis",
          "uri": "/api/v1/custom_emojis",
          "returns": "CustomEmoji",
          "method": "GET",
          "queryParams": [],
          "description": "View all custom emoji",
          "name": "get",
          "pathParams": []
        }
      },
      "description": " Each site can define and upload its own custom emoji to be attached to profiles or statuses."
    },
    "blocks": {
      "methods": {
        "get": {
          "pathParams": [],
          "method": "GET",
          "queryParams": [
            {
              "nullable": 0,
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
              "name": "limit",
              "type": "integer",
              "required": 0
            }
          ],
          "description": "View blocked users",
          "name": "get",
          "returns": "Account",
          "namespace": "blocks",
          "uri": "/api/v1/blocks",
          "formParams": [],
          "returnsArray": 1
        }
      },
      "description": "View your blocks. See also accounts/:id/{block,unblock}"
    },
    "timelines": {
      "methods": {
        "direct": {
          "pathParams": [],
          "method": "GET",
          "description": "(DEPRECATED) View direct timeline",
          "queryParams": [
            {
              "nullable": 0,
              "description": "Return results older than ID.",
              "name": "max_id ",
              "required": 0,
              "type": "string"
            },
            {
              "nullable": 0,
              "name": "since_id",
              "description": "Return results newer than ID.",
              "type": "string",
              "required": 0
            },
            {
              "nullable": 0,
              "description": "Return results immediately newer than ID.",
              "name": "min_id",
              "type": "string",
              "required": 0
            },
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
            }
          ],
          "name": "direct",
          "returns": "Status",
          "namespace": "timelines",
          "uri": "/api/v1/timelines/direct",
          "formParams": [],
          "returnsArray": 1
        },
        "tag": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Status",
          "uri": "/api/v1/timelines/tag/:hashtag",
          "namespace": "timelines",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "nullable": 0,
              "name": "hashtag",
              "description": "The name of the hashtag (not including the # symbol)."
            }
          ],
          "queryParams": [
            {
              "type": "array<String>",
              "required": 0,
              "name": "any[]",
              "description": "Return statuses that contain any of these additional tags.",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "array<String>",
              "nullable": 0,
              "name": "all[]",
              "description": "Return statuses that contain all of these additional tags."
            },
            {
              "type": "array<String>",
              "required": 0,
              "name": "none[]",
              "description": "Return statuses that contain none of these additional tags.",
              "nullable": 0
            },
            {
              "type": "boolean",
              "required": 0,
              "nullable": 0,
              "name": "local",
              "description": "Return only local statuses? Defaults to false."
            },
            {
              "required": 0,
              "type": "boolean",
              "description": "Return only remote statuses? Defaults to false.",
              "name": "remote",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "boolean",
              "nullable": 0,
              "description": "Return only statuses with media attachments? Defaults to false.",
              "name": "only_media"
            },
            {
              "description": "Return results older than ID.",
              "name": "max_id ",
              "nullable": 0,
              "required": 0,
              "type": "string"
            },
            {
              "nullable": 0,
              "description": "Return results newer than ID.",
              "name": "since_id",
              "required": 0,
              "type": "string"
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "name": "min_id",
              "description": "Return results immediately newer than ID."
            },
            {
              "required": 0,
              "type": "integer",
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
            }
          ],
          "description": "View hashtag timeline",
          "name": "tag",
          "method": "GET"
        },
        "home": {
          "formParams": [],
          "returnsArray": 1,
          "description": "View home timeline",
          "queryParams": [
            {
              "nullable": 0,
              "description": "Return results older than ID.",
              "name": "max_id ",
              "type": "string",
              "required": 0
            },
            {
              "name": "since_id",
              "description": "Return results newer than ID.",
              "nullable": 0,
              "required": 0,
              "type": "string"
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "description": "Return results immediately newer than ID.",
              "name": "min_id"
            },
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
              "name": "limit"
            }
          ],
          "name": "home",
          "method": "GET",
          "pathParams": [],
          "namespace": "timelines",
          "uri": "/api/v1/timelines/home",
          "returns": "Status"
        },
        "public": {
          "pathParams": [],
          "description": "View public timeline",
          "queryParams": [
            {
              "type": "boolean",
              "required": 0,
              "nullable": 0,
              "description": "Show only local statuses? Defaults to false.",
              "name": "local"
            },
            {
              "nullable": 0,
              "name": "remote",
              "description": "Show only remote statuses? Defaults to false.",
              "required": 0,
              "type": "boolean"
            },
            {
              "nullable": 0,
              "name": "only_media",
              "description": "Show only statuses with media attached? Defaults to false.",
              "type": "boolean",
              "required": 0
            },
            {
              "required": 0,
              "type": "string",
              "description": "Return results older than ID.",
              "name": "max_id ",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "description": "Return results newer than ID.",
              "name": "since_id"
            },
            {
              "name": "min_id",
              "description": "Return results immediately newer than ID.",
              "nullable": 0,
              "required": 0,
              "type": "string"
            },
            {
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
              "nullable": 0,
              "type": "integer",
              "required": 0
            }
          ],
          "name": "public",
          "method": "GET",
          "returns": "Status",
          "uri": "/api/v1/timelines/public",
          "namespace": "timelines",
          "formParams": [],
          "returnsArray": 1
        },
        "list": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "timelines",
          "uri": "/api/v1/timelines/list/:list_id",
          "returns": "Status",
          "method": "GET",
          "description": "View list timeline",
          "queryParams": [
            {
              "type": "string",
              "required": 0,
              "name": "max_id ",
              "description": "Return results older than ID.",
              "nullable": 0
            },
            {
              "type": "string",
              "required": 0,
              "name": "since_id",
              "description": "Return results newer than ID.",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "string",
              "description": "Return results immediately newer than ID.",
              "name": "min_id",
              "nullable": 0
            },
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
            }
          ],
          "name": "list",
          "pathParams": [
            {
              "nullable": 0,
              "name": "list_id",
              "description": "Local ID of the List in the database.",
              "required": 1,
              "type": "string"
            }
          ]
        }
      },
      "description": "Read and view timelines of statuses."
    },
    "trends": {
      "methods": {
        "statuses": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Status",
          "namespace": "trends",
          "uri": "/api/v1/trends/statuses",
          "pathParams": [],
          "name": "statuses",
          "queryParams": [
            {
              "type": "integer",
              "required": 0,
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
              "name": "limit",
              "nullable": 0
            },
            {
              "nullable": 0,
              "description": "Skip the first n results.",
              "name": "offset",
              "type": "integer",
              "required": 0
            }
          ],
          "description": "View trending statuses",
          "method": "GET"
        },
        "links": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Trends::Link",
          "uri": "/api/v1/trends/links",
          "namespace": "trends",
          "pathParams": [],
          "queryParams": [
            {
              "required": 0,
              "type": "integer",
              "description": "Maximum number of results to return. Defaults to 10 links. Max 20 links.",
              "name": "limit",
              "nullable": 0
            },
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "description": "Skip the first n results.",
              "name": "offset"
            }
          ],
          "description": "View trending links",
          "name": "links",
          "method": "GET"
        },
        "tags": {
          "formParams": [],
          "returnsArray": 1,
          "method": "GET",
          "description": "View trending tags",
          "queryParams": [
            {
              "nullable": 0,
              "description": "Maximum number of results to return. Defaults to 10 tags. Max 20 tags.",
              "name": "limit",
              "type": "integer",
              "required": 0
            },
            {
              "required": 0,
              "type": "integer",
              "nullable": 0,
              "description": "Skip the first n results.",
              "name": "offset"
            }
          ],
          "name": "tags",
          "pathParams": [],
          "uri": "/api/v1/trends/tags",
          "namespace": "trends",
          "returns": "Tag"
        }
      },
      "description": "View hashtags that are currently being used more frequently than usual."
    },
    "bookmarks": {
      "methods": {
        "get": {
          "queryParams": [
            {
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
              "nullable": 0,
              "required": 0,
              "type": "integer"
            }
          ],
          "description": "View bookmarked statuses",
          "name": "get",
          "method": "GET",
          "pathParams": [],
          "namespace": "bookmarks",
          "uri": "/api/v1/bookmarks",
          "returns": "Status",
          "formParams": [],
          "returnsArray": 1
        }
      },
      "description": "View your bookmarks. See also statuses/:id/{bookmark,unbookmark}"
    },
    "followed_tags": {
      "description": "View your followed hashtags.",
      "methods": {
        "get": {
          "returns": "Tag",
          "uri": "/api/v1/followed_tags",
          "namespace": "followed_tags",
          "pathParams": [],
          "method": "GET",
          "description": "View all followed tags",
          "queryParams": [
            {
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 100 tags. Max 200 tags.",
              "nullable": 0,
              "required": 0,
              "type": "integer"
            }
          ],
          "name": "get",
          "returnsArray": 1,
          "formParams": []
        }
      }
    },
    "statuses": {
      "methods": {
        "context": {
          "returnsArray": null,
          "formParams": [],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/context",
          "returns": "Context",
          "method": "GET",
          "name": "context",
          "queryParams": [],
          "description": "Get parent and child statuses in context",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Status in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ]
        },
        "source": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/source",
          "returns": "StatusSource",
          "queryParams": [],
          "name": "source",
          "description": "View status source",
          "method": "GET",
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The local ID of the Status in the database.",
              "required": 1,
              "type": "string"
            }
          ]
        },
        "unreblog": {
          "formParams": [],
          "returnsArray": 1,
          "method": "POST",
          "queryParams": [],
          "name": "unreblog",
          "description": "Undo boost of a status",
          "pathParams": [
            {
              "description": "The ID of the Status in the database.",
              "name": "id",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/unreblog",
          "returns": "Status"
        },
        "unpin": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/unpin",
          "returns": "Status",
          "queryParams": [],
          "name": "unpin",
          "description": "Unpin status from profile",
          "method": "POST",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "description": "The local ID of the Status in the database.",
              "name": "id"
            }
          ]
        },
        "unfavourite": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Status",
          "uri": "/api/v1/statuses/:id/unfavourite",
          "namespace": "statuses",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Status in the database."
            }
          ],
          "description": "Undo favourite of a status",
          "queryParams": [],
          "name": "unfavourite",
          "method": "POST"
        },
        "card": {
          "name": "card",
          "queryParams": [],
          "description": "(DEPRECATED) Fetch preview card",
          "method": "GET",
          "pathParams": [
            {
              "name": "id",
              "description": "The local ID of the Status in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/card",
          "returns": "PreviewCard",
          "formParams": [],
          "returnsArray": 1
        },
        "unmute": {
          "returnsArray": 1,
          "formParams": [],
          "returns": "Status",
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/unmute",
          "pathParams": [
            {
              "description": "The ID of the Status in the database.",
              "name": "id",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "name": "unmute",
          "queryParams": [],
          "description": "Unmute a conversation",
          "method": "POST"
        },
        "bookmark": {
          "formParams": [],
          "returnsArray": 1,
          "method": "POST",
          "name": "bookmark",
          "queryParams": [],
          "description": "Bookmark a status",
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Status in the database.",
              "type": "string",
              "required": 1
            }
          ],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/bookmark",
          "returns": "Status"
        },
        "translate": {
          "returns": "Translation",
          "uri": "/api/v1/statuses/:id/translate",
          "namespace": "statuses",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "description": "The ID of the Status in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "name": "translate",
          "queryParams": [],
          "description": "Translate a status",
          "method": "POST",
          "returnsArray": null,
          "formParams": [
            {
              "name": "lang",
              "description": "The status content will be translated into this language. Defaults to the user's current locale.",
              "nullable": 0,
              "required": 0,
              "type": "string"
            }
          ]
        },
        "unbookmark": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/unbookmark",
          "returns": "Status",
          "description": "Undo bookmark of a status",
          "queryParams": [],
          "name": "unbookmark",
          "method": "POST",
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Status in the database.",
              "type": "string",
              "required": 1
            }
          ]
        },
        "get": {
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Status in the database.",
              "required": 1,
              "type": "string"
            }
          ],
          "method": "GET",
          "queryParams": [],
          "name": "get",
          "description": "View a single status",
          "returns": "Status",
          "uri": "/api/v1/statuses/:id",
          "namespace": "statuses",
          "formParams": [],
          "returnsArray": null
        },
        "create": {
          "method": "POST",
          "name": "create",
          "queryParams": [],
          "description": "Post a new status",
          "pathParams": [],
          "uri": "/api/v1/statuses",
          "namespace": "statuses",
          "returns": "Status",
          "formParams": [
            {
              "description": "The text content of the status. If `media_ids` is provided, this becomes optional. Attaching a `poll` is optional while `status` is provided.",
              "name": "status",
              "nullable": 0,
              "type": "string",
              "required": 1
            },
            {
              "required": 1,
              "type": "array<String>",
              "description": "Include Attachment IDs to be attached as media. If provided, `status` becomes optional, and `poll` cannot be used.",
              "name": "media_ids[]",
              "nullable": 0
            },
            {
              "type": "string",
              "required": 0,
              "description": "ID of the status being replied to, if status is a reply.",
              "name": "in_reply_to_id",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "boolean",
              "description": "Mark status and attached media as sensitive? Defaults to false.",
              "name": "sensitive",
              "nullable": 0
            },
            {
              "name": "spoiler_text",
              "description": "Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field.",
              "nullable": 0,
              "required": 0,
              "type": "string"
            },
            {
              "nullable": 0,
              "name": "visibility",
              "description": "Sets the visibility of the posted status to `public`, `unlisted`, `private`, `direct`.",
              "required": 0,
              "type": "string"
            },
            {
              "name": "language",
              "description": "ISO 639 language code for this status.",
              "nullable": 0,
              "type": "string",
              "required": 0
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "description": "ISO 8601 Datetime at which to schedule a status. Providing this parameter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.",
              "name": "scheduled_at"
            }
          ],
          "returnsArray": null
        },
        "history": {
          "returns": "StatusEdit",
          "uri": "/api/v1/statuses/:id/history",
          "namespace": "statuses",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "id",
              "description": "The local ID of the Status in the database."
            }
          ],
          "method": "GET",
          "queryParams": [],
          "description": "View edit history of a status",
          "name": "history",
          "returnsArray": 1,
          "formParams": []
        },
        "favourited_by": {
          "uri": "/api/v1/statuses/:id/favourited_by",
          "namespace": "statuses",
          "returns": "Account",
          "method": "GET",
          "queryParams": [
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
            }
          ],
          "name": "favourited_by",
          "description": "See who favourited a status",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "description": "The ID of the Status in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "returnsArray": 1,
          "formParams": []
        },
        "favourite": {
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/favourite",
          "returns": "Status",
          "method": "POST",
          "queryParams": [],
          "description": "Favourite a status",
          "name": "favourite",
          "pathParams": [
            {
              "required": 1,
              "type": "string",
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Status in the database."
            }
          ],
          "returnsArray": 1,
          "formParams": []
        },
        "boost": {
          "returnsArray": 1,
          "formParams": [
            {
              "required": 0,
              "type": "string",
              "description": "Any visibility except `limited` or `direct` (i.e. `public`, `unlisted`, `private`). Defaults to public. Currently unused in UI.",
              "name": "visibility",
              "nullable": 0
            }
          ],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/reblog",
          "returns": "Status",
          "method": "POST",
          "queryParams": [],
          "name": "boost",
          "description": "Boost a status",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The ID of the Status in the database.",
              "name": "id",
              "nullable": 0
            }
          ]
        },
        "pin": {
          "formParams": [],
          "returnsArray": 1,
          "pathParams": [
            {
              "nullable": 0,
              "description": "The local ID of the Status in the database. The status should be authored by the authorized account.",
              "name": "id",
              "type": "string",
              "required": 1
            }
          ],
          "name": "pin",
          "queryParams": [],
          "description": "Pin status to profile",
          "method": "POST",
          "returns": "Status",
          "uri": "/api/v1/statuses/:id/pin",
          "namespace": "statuses"
        },
        "delete": {
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id",
          "returns": "Status",
          "queryParams": [],
          "description": "Delete a status",
          "name": "delete",
          "method": "DELETE",
          "pathParams": [
            {
              "nullable": 0,
              "description": "The ID of the Status in the database.",
              "name": "id",
              "type": "string",
              "required": 1
            }
          ],
          "returnsArray": null,
          "formParams": []
        },
        "mute": {
          "returnsArray": 1,
          "formParams": [],
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id/mute",
          "returns": "Status",
          "method": "POST",
          "name": "mute",
          "queryParams": [],
          "description": "Mute a conversation",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "description": "The ID of the Status in the database.",
              "name": "id"
            }
          ]
        },
        "reblogged_by": {
          "formParams": [],
          "returnsArray": 1,
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Status in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "name": "reblogged_by",
          "queryParams": [
            {
              "type": "integer",
              "required": 0,
              "nullable": 0,
              "name": "limit",
              "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
            }
          ],
          "description": "See who boosted a status",
          "method": "GET",
          "returns": "Account",
          "uri": "/api/v1/statuses/:id/reblogged_by",
          "namespace": "statuses"
        },
        "edit": {
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The ID of the Status in the database.",
              "name": "id",
              "nullable": 0
            }
          ],
          "method": "PUT",
          "queryParams": [],
          "description": "Edit a status",
          "name": "edit",
          "returns": "Status",
          "namespace": "statuses",
          "uri": "/api/v1/statuses/:id",
          "formParams": [
            {
              "nullable": 0,
              "name": "status",
              "description": "The plain text content of the status.",
              "type": "string",
              "required": 0
            },
            {
              "type": "string",
              "required": 0,
              "description": "The plain text subject or content warning of the status.",
              "name": "spoiler_text",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "boolean",
              "nullable": 0,
              "name": "sensitive",
              "description": "Whether the status should be marked as sensitive."
            },
            {
              "description": "ISO 639 language code for the status.",
              "name": "language",
              "nullable": 0,
              "type": "string",
              "required": 0
            },
            {
              "type": "array<String>",
              "required": 0,
              "nullable": 0,
              "description": "Include Attachment IDs to be attached as media. If provided, `status` becomes optional, and `poll` cannot be used.",
              "name": "media_ids[]"
            }
          ],
          "returnsArray": 1
        }
      },
      "description": "Publish, interact, and view information about statuses."
    },
    "reports": {
      "description": "Report problematic users to your moderators.",
      "methods": {
        "post": {
          "method": "POST",
          "queryParams": [],
          "name": "post",
          "description": "File a report",
          "pathParams": [],
          "uri": "/api/v1/reports",
          "namespace": "reports",
          "returns": "Report",
          "formParams": [
            {
              "type": "string",
              "required": 1,
              "nullable": 0,
              "name": "account_id",
              "description": "ID of the account to report."
            },
            {
              "type": "array<String>",
              "required": 0,
              "description": "You can attach statuses to the report to provide additional context.",
              "name": "status_ids[]",
              "nullable": 0
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "description": "The reason for the report. Default maximum of 1000 characters.",
              "name": "comment"
            },
            {
              "required": 0,
              "type": "boolean",
              "nullable": 0,
              "description": "If the account is remote, should the report be forwarded to the remote admin? Defaults to false.",
              "name": "forward"
            },
            {
              "nullable": 0,
              "description": "Specify if the report is due to `spam`, `violation` of enumerated instance rules, or some `other` reason. Defaults to `other`. Will be set to `violation` if `rule_ids[]` is provided (regardless of any category value you provide).",
              "name": "category",
              "type": "string",
              "required": 0
            },
            {
              "required": 0,
              "type": "array<Integer>",
              "description": "For `violation` category reports, specify the ID of the exact rules broken. Rules and their IDs are available via [GET /api/v1/instance/rules]({{< relref \"methods/instance#rules\" >}}) and [GET /api/v1/instance]({{< relref \"methods/instance#get\" >}}).",
              "name": "rule_ids[]",
              "nullable": 0
            }
          ],
          "returnsArray": null
        }
      }
    },
    "announcements": {
      "description": "For announcements set by administration.",
      "methods": {
        "put-reactions": {
          "queryParams": [],
          "description": "Add a reaction to an announcement",
          "name": "put-reactions",
          "method": "PUT",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Announcement in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            },
            {
              "description": "Unicode emoji, or the shortcode of a custom emoji.",
              "name": "name",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "uri": "/api/v1/announcements/:id/reactions/:name",
          "namespace": "announcements",
          "returns": "EmptyOrUnknown",
          "formParams": [],
          "returnsArray": 1
        },
        "get": {
          "queryParams": [
            {
              "description": "If true, response will include announcements dismissed by the user. Defaults to false.",
              "name": "with_dismissed",
              "nullable": 0,
              "type": "boolean",
              "required": 0
            }
          ],
          "description": "View all announcements",
          "name": "get",
          "method": "GET",
          "pathParams": [],
          "namespace": "announcements",
          "uri": "/api/v1/announcements",
          "returns": "Announcement",
          "formParams": [],
          "returnsArray": 1
        },
        "delete-reactions": {
          "queryParams": [],
          "description": "Remove a reaction from an announcement",
          "name": "delete-reactions",
          "method": "DELETE",
          "pathParams": [
            {
              "nullable": 0,
              "name": "id",
              "description": "The ID of the Announcement in the database.",
              "type": "string",
              "required": 1
            },
            {
              "name": "name",
              "description": "Unicode emoji, or the shortcode of a custom emoji.",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ],
          "namespace": "announcements",
          "uri": "/api/v1/announcements/:id/reactions/:name",
          "returns": "EmptyOrUnknown",
          "formParams": [],
          "returnsArray": 1
        },
        "dismiss": {
          "queryParams": [],
          "description": "Dismiss an announcement",
          "name": "dismiss",
          "method": "POST",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the Announcement in the database.",
              "nullable": 0,
              "required": 1,
              "type": "string"
            }
          ],
          "namespace": "announcements",
          "uri": "/api/v1/announcements/:id/dismiss",
          "returns": "EmptyOrUnknown",
          "formParams": [],
          "returnsArray": 1
        }
      }
    },
    "media": {
      "description": " Attach media to authored statuses. See Using Mastodon > Posting toots > Attachments for more information about size and format limits.",
      "methods": {
        "update": {
          "returnsArray": null,
          "formParams": [
            {
              "type": "hash",
              "required": 0,
              "nullable": 0,
              "name": "thumbnail",
              "description": "The custom thumbnail of the media to be attached, encoded using multipart form data."
            },
            {
              "nullable": 0,
              "description": "A plain-text description of the media, for accessibility purposes.",
              "name": "description",
              "type": "string",
              "required": 0
            },
            {
              "description": "Two floating points (x,y), comma-delimited, ranging from -1.0 to 1.0. See [Focal points for cropping media thumbnails]({{< relref \"api/guidelines#focal-points\" >}}) for more information.",
              "name": "focus",
              "nullable": 0,
              "type": "string",
              "required": 0
            }
          ],
          "uri": "/api/v1/media/:id",
          "namespace": "media",
          "returns": "MediaAttachment",
          "description": "Update media attachment",
          "queryParams": [],
          "name": "update",
          "method": "PUT",
          "pathParams": [
            {
              "type": "string",
              "required": 1,
              "description": "The ID of the MediaAttachment in the database.",
              "name": "id",
              "nullable": 0
            }
          ]
        },
        "v1": {
          "description": "(DEPRECATED) Upload media as an attachment",
          "queryParams": [],
          "name": "v1",
          "method": "POST",
          "pathParams": [],
          "namespace": "media",
          "uri": "/api/v1/media",
          "returns": "MediaAttachment",
          "formParams": [
            {
              "description": "The file to be attached, encoded using multipart form data. The file must have a MIME type.",
              "name": "file",
              "nullable": 0,
              "type": "hash",
              "required": 1
            },
            {
              "required": 0,
              "type": "hash",
              "description": "The custom thumbnail of the media to be attached, encoded using multipart form data.",
              "name": "thumbnail",
              "nullable": 0
            },
            {
              "type": "string",
              "required": 0,
              "nullable": 0,
              "name": "description",
              "description": "A plain-text description of the media, for accessibility purposes."
            },
            {
              "required": 0,
              "type": "string",
              "nullable": 0,
              "description": "Two floating points (x,y), comma-delimited, ranging from -1.0 to 1.0. See [Focal points for cropping media thumbnails]({{< relref \"api/guidelines#focal-points\" >}}) for more information.",
              "name": "focus"
            }
          ],
          "returnsArray": null
        },
        "v2": {
          "returnsArray": null,
          "formParams": [
            {
              "type": "hash",
              "required": 1,
              "name": "file",
              "description": "The file to be attached, encoded using multipart form data. The file must have a MIME type.",
              "nullable": 0
            },
            {
              "nullable": 0,
              "name": "thumbnail",
              "description": "The custom thumbnail of the media to be attached, encoded using multipart form data.",
              "type": "hash",
              "required": 0
            },
            {
              "type": "string",
              "required": 0,
              "description": "A plain-text description of the media, for accessibility purposes.",
              "name": "description",
              "nullable": 0
            },
            {
              "type": "string",
              "required": 0,
              "description": "Two floating points (x,y), comma-delimited, ranging from -1.0 to 1.0. See [Focal points for cropping media thumbnails]({{< relref \"api/guidelines#focal-points\" >}}) for more information.",
              "name": "focus",
              "nullable": 0
            }
          ],
          "uri": "/api/v2/media",
          "namespace": "media",
          "returns": "MediaAttachment",
          "method": "POST",
          "description": "Upload media as an attachment (async)",
          "queryParams": [],
          "name": "v2",
          "pathParams": []
        },
        "get": {
          "returnsArray": null,
          "formParams": [],
          "uri": "/api/v1/media/:id",
          "namespace": "media",
          "returns": "MediaAttachment",
          "method": "GET",
          "name": "get",
          "queryParams": [],
          "description": "Get media attachment",
          "pathParams": [
            {
              "name": "id",
              "description": "The ID of the MediaAttachment in the database.",
              "nullable": 0,
              "type": "string",
              "required": 1
            }
          ]
        }
      }
    }
  }
}
