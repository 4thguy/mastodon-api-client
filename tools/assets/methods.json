{
  "follow_requests": {
    "accept": {
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "account_id"
        }
      ],
      "formParams": [],
      "returns": "Relationship",
      "method": "POST",
      "uri": "/api/v1/follow_requests/:account_id/authorize",
      "description": "Accept follow request",
      "namespace": "follow_requests",
      "queryParams": [],
      "name": "accept"
    },
    "get": {
      "pathParams": [],
      "returns": "Account",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/follow_requests",
      "description": "View pending follow requests",
      "namespace": "follow_requests",
      "queryParams": [
        {
          "nullable": 1,
          "name": "limit",
          "type": "integer",
          "required": 0,
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
        }
      ],
      "name": "get"
    },
    "reject": {
      "formParams": [],
      "method": "POST",
      "returns": "Relationship",
      "uri": "/api/v1/follow_requests/:account_id/reject",
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "name": "account_id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ],
      "queryParams": [],
      "name": "reject",
      "description": "Reject follow request",
      "namespace": "follow_requests"
    }
  },
  "followed_tags": {
    "get": {
      "description": "View all followed tags",
      "namespace": "followed_tags",
      "queryParams": [
        {
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1,
          "description": "Maximum number of results to return. Defaults to 100 tags. Max 200 tags."
        }
      ],
      "name": "get",
      "pathParams": [],
      "formParams": [],
      "method": "GET",
      "returns": "Tag",
      "uri": "/api/v1/followed_tags"
    }
  },
  "streaming": {
    "health": {
      "namespace": "streaming",
      "description": "Check if the server is alive",
      "name": "health",
      "queryParams": [],
      "pathParams": [],
      "uri": "/api/v1/streaming/health",
      "formParams": [],
      "method": "GET",
      "returns": "empty"
    }
  },
  "statuses": {
    "pin": {
      "description": "Pin status to profile",
      "namespace": "statuses",
      "queryParams": [],
      "name": "pin",
      "pathParams": [
        {
          "description": "The local ID of the Status in the database. The status should be authored by the authorized account.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ],
      "formParams": [],
      "returns": "Status",
      "method": "POST",
      "uri": "/api/v1/statuses/:id/pin"
    },
    "bookmark": {
      "name": "bookmark",
      "queryParams": [],
      "namespace": "statuses",
      "description": "Bookmark a status",
      "uri": "/api/v1/statuses/:id/bookmark",
      "returns": "Status",
      "formParams": [],
      "method": "POST",
      "pathParams": [
        {
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1,
          "description": "The ID of the Status in the database."
        }
      ]
    },
    "card": {
      "name": "card",
      "queryParams": [],
      "namespace": "statuses",
      "description": "(DEPRECATED) Fetch preview card",
      "uri": "/api/v1/statuses/:id/card",
      "formParams": [],
      "method": "GET",
      "returns": "PreviewCard",
      "pathParams": [
        {
          "description": "The local ID of the Status in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ]
    },
    "context": {
      "method": "GET",
      "formParams": [],
      "returns": "Context",
      "uri": "/api/v1/statuses/:id/context",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "queryParams": [],
      "name": "context",
      "description": "Get parent and child statuses in context",
      "namespace": "statuses"
    },
    "unbookmark": {
      "method": "POST",
      "formParams": [],
      "returns": "Status",
      "uri": "/api/v1/statuses/:id/unbookmark",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "queryParams": [],
      "name": "unbookmark",
      "description": "Undo bookmark of a status",
      "namespace": "statuses"
    },
    "create": {
      "description": "Post a new status",
      "namespace": "statuses",
      "queryParams": [],
      "name": "create",
      "pathParams": [],
      "method": "POST",
      "formParams": [
        {
          "description": "The text content of the status. If `media_ids` is provided, this becomes optional. Attaching a `poll` is optional while `status` is provided.",
          "required": 1,
          "type": "string",
          "name": "status",
          "nullable": ""
        },
        {
          "type": "array of string",
          "required": 1,
          "nullable": "",
          "name": "media_ids[]",
          "description": "Include Attachment IDs to be attached as media. If provided, `status` becomes optional, and `poll` cannot be used."
        },
        {
          "description": "ID of the status being replied to, if status is a reply.",
          "required": 0,
          "type": "string",
          "name": "in_reply_to_id",
          "nullable": 1
        },
        {
          "description": "Mark status and attached media as sensitive? Defaults to false.",
          "name": "sensitive",
          "nullable": 1,
          "required": 0,
          "type": "boolean"
        },
        {
          "required": 0,
          "type": "string",
          "name": "spoiler_text",
          "nullable": 1,
          "description": "Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field."
        },
        {
          "required": 0,
          "type": "string",
          "name": "visibility",
          "nullable": 1,
          "description": "Sets the visibility of the posted status to `public`, `unlisted`, `private`, `direct`."
        },
        {
          "required": 0,
          "type": "string",
          "name": "language",
          "nullable": 1,
          "description": "ISO 639 language code for this status."
        },
        {
          "description": "ISO 8601 Datetime at which to schedule a status. Providing this parameter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.",
          "nullable": 1,
          "name": "scheduled_at",
          "type": "string",
          "required": 0
        }
      ],
      "returns": "Status",
      "uri": "/api/v1/statuses"
    },
    "favourited_by": {
      "description": "See who favourited a status",
      "namespace": "statuses",
      "queryParams": [
        {
          "name": "limit",
          "nullable": 1,
          "required": 0,
          "type": "integer",
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
        }
      ],
      "name": "favourited_by",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "method": "GET",
      "formParams": [],
      "returns": "Account",
      "uri": "/api/v1/statuses/:id/favourited_by"
    },
    "reblogged_by": {
      "formParams": [],
      "method": "GET",
      "returns": "Account",
      "uri": "/api/v1/statuses/:id/reblogged_by",
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the Status in the database."
        }
      ],
      "queryParams": [
        {
          "type": "integer",
          "required": 0,
          "nullable": 1,
          "name": "limit",
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
        }
      ],
      "name": "reblogged_by",
      "description": "See who boosted a status",
      "namespace": "statuses"
    },
    "favourite": {
      "description": "Favourite a status",
      "namespace": "statuses",
      "queryParams": [],
      "name": "favourite",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ],
      "method": "POST",
      "formParams": [],
      "returns": "Status",
      "uri": "/api/v1/statuses/:id/favourite"
    },
    "unmute": {
      "uri": "/api/v1/statuses/:id/unmute",
      "method": "POST",
      "formParams": [],
      "returns": "Status",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ],
      "name": "unmute",
      "queryParams": [],
      "namespace": "statuses",
      "description": "Unmute a conversation"
    },
    "unfavourite": {
      "namespace": "statuses",
      "description": "Undo favourite of a status",
      "name": "unfavourite",
      "queryParams": [],
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ],
      "uri": "/api/v1/statuses/:id/unfavourite",
      "formParams": [],
      "method": "POST",
      "returns": "Status"
    },
    "translate": {
      "formParams": [
        {
          "description": "The status content will be translated into this language. Defaults to the user's current locale.",
          "nullable": 1,
          "name": "lang",
          "type": "string (iso 639 language code)",
          "required": 0
        }
      ],
      "returns": "Translation",
      "method": "POST",
      "uri": "/api/v1/statuses/:id/translate",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "queryParams": [],
      "name": "translate",
      "description": "Translate a status",
      "namespace": "statuses"
    },
    "unpin": {
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The local ID of the Status in the database."
        }
      ],
      "formParams": [],
      "method": "POST",
      "returns": "Status",
      "uri": "/api/v1/statuses/:id/unpin",
      "description": "Unpin status from profile",
      "namespace": "statuses",
      "queryParams": [],
      "name": "unpin"
    },
    "delete": {
      "returns": "Status",
      "formParams": [],
      "method": "DELETE",
      "uri": "/api/v1/statuses/:id",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ],
      "queryParams": [],
      "name": "delete",
      "description": "Delete a status",
      "namespace": "statuses"
    },
    "unreblog": {
      "description": "Undo boost of a status",
      "namespace": "statuses",
      "queryParams": [],
      "name": "unreblog",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id"
        }
      ],
      "method": "POST",
      "formParams": [],
      "returns": "Status",
      "uri": "/api/v1/statuses/:id/unreblog"
    },
    "edit": {
      "namespace": "statuses",
      "description": "Edit a status",
      "name": "edit",
      "queryParams": [],
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "uri": "/api/v1/statuses/:id",
      "formParams": [
        {
          "description": "The plain text content of the status.",
          "name": "status",
          "nullable": 1,
          "required": 0,
          "type": "string"
        },
        {
          "nullable": 1,
          "name": "spoiler_text",
          "type": "string",
          "required": 0,
          "description": "The plain text subject or content warning of the status."
        },
        {
          "type": "boolean",
          "required": 0,
          "nullable": 1,
          "name": "sensitive",
          "description": "Whether the status should be marked as sensitive."
        },
        {
          "name": "language",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "ISO 639 language code for the status."
        },
        {
          "name": "media_ids[]",
          "nullable": 1,
          "required": 0,
          "type": "array of string",
          "description": "Include Attachment IDs to be attached as media. If provided, `status` becomes optional, and `poll` cannot be used."
        }
      ],
      "returns": "Status",
      "method": "PUT"
    },
    "mute": {
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ],
      "uri": "/api/v1/statuses/:id/mute",
      "formParams": [],
      "method": "POST",
      "returns": "Status",
      "namespace": "statuses",
      "description": "Mute a conversation",
      "name": "mute",
      "queryParams": []
    },
    "source": {
      "name": "source",
      "queryParams": [],
      "namespace": "statuses",
      "description": "View status source",
      "uri": "/api/v1/statuses/:id/source",
      "returns": "StatusSource",
      "formParams": [],
      "method": "GET",
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The local ID of the Status in the database."
        }
      ]
    },
    "history": {
      "description": "View edit history of a status",
      "namespace": "statuses",
      "queryParams": [],
      "name": "history",
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The local ID of the Status in the database."
        }
      ],
      "returns": "StatusEdit",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/statuses/:id/history"
    },
    "get": {
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the Status in the database."
        }
      ],
      "uri": "/api/v1/statuses/:id",
      "formParams": [],
      "method": "GET",
      "returns": "Status",
      "namespace": "statuses",
      "description": "View a single status",
      "name": "get",
      "queryParams": []
    },
    "boost": {
      "method": "POST",
      "formParams": [
        {
          "description": "Any visibility except `limited` or `direct` (i.e. `public`, `unlisted`, `private`). Defaults to public. Currently unused in UI.",
          "required": 0,
          "type": "string",
          "name": "visibility",
          "nullable": 1
        }
      ],
      "returns": "Status",
      "uri": "/api/v1/statuses/:id/reblog",
      "pathParams": [
        {
          "description": "The ID of the Status in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ],
      "queryParams": [],
      "name": "boost",
      "description": "Boost a status",
      "namespace": "statuses"
    }
  },
  "oembed": {
    "get": {
      "uri": "/api/oembed",
      "method": "GET",
      "formParams": [],
      "returns": "empty",
      "pathParams": [],
      "name": "get",
      "queryParams": [
        {
          "description": "URL of a status.",
          "name": "url",
          "nullable": "",
          "required": 1,
          "type": "string"
        },
        {
          "description": "Width of the iframe. Defaults to 400",
          "type": "number",
          "required": 0,
          "nullable": 1,
          "name": "maxwidth"
        },
        {
          "required": 0,
          "type": "number",
          "name": "maxheight",
          "nullable": 1,
          "description": "Height of the iframe. Defaults to null"
        }
      ],
      "namespace": "oembed",
      "description": "Get OEmbed info as JSON"
    }
  },
  "push": {
    "delete": {
      "queryParams": [],
      "name": "delete",
      "description": "Remove current subscription",
      "namespace": "push",
      "formParams": [],
      "returns": "empty",
      "method": "DELETE",
      "uri": "/api/v1/push/subscription",
      "pathParams": []
    },
    "create": {
      "pathParams": [],
      "formParams": [],
      "returns": "WebPushSubscription",
      "method": "POST",
      "uri": "/api/v1/push/subscription",
      "description": "Subscribe to push notifications",
      "namespace": "push",
      "queryParams": [],
      "name": "create"
    },
    "update": {
      "pathParams": [],
      "uri": "/api/v1/push/subscription",
      "formParams": [
        {
          "required": 0,
          "type": "string",
          "name": "policy",
          "nullable": 1,
          "description": "Specify whether to receive push notifications from `all`, `followed`, `follower`, or `none` users."
        }
      ],
      "returns": "WebPushSubscription",
      "method": "PUT",
      "namespace": "push",
      "description": "Change types of notifications",
      "name": "update",
      "queryParams": []
    },
    "get": {
      "queryParams": [],
      "name": "get",
      "description": "Get current subscription",
      "namespace": "push",
      "formParams": [],
      "method": "GET",
      "returns": "WebPushSubscription",
      "uri": "/api/v1/push/subscription",
      "pathParams": []
    }
  },
  "mutes": {
    "get": {
      "pathParams": [],
      "formParams": [],
      "method": "GET",
      "returns": "Account",
      "uri": "/api/v1/mutes",
      "description": "View muted accounts",
      "namespace": "mutes",
      "queryParams": [
        {
          "nullable": 1,
          "name": "limit",
          "type": "integer",
          "required": 0,
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
        }
      ],
      "name": "get"
    }
  },
  "scheduled_statuses": {
    "cancel": {
      "pathParams": [
        {
          "description": "The ID of the ScheduledStatus in the database.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ],
      "formParams": [],
      "method": "DELETE",
      "returns": "empty",
      "uri": "/api/v1/scheduled_statuses/:id",
      "description": "Cancel a scheduled status",
      "namespace": "scheduled_statuses",
      "queryParams": [],
      "name": "cancel"
    },
    "get-one": {
      "queryParams": [],
      "name": "get-one",
      "description": "View a single scheduled status",
      "namespace": "scheduled_statuses",
      "formParams": [],
      "returns": "ScheduledStatus",
      "method": "GET",
      "uri": "/api/v1/scheduled_statuses/:id",
      "pathParams": [
        {
          "description": "The ID of the ScheduledStatus in the database.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id"
        }
      ]
    },
    "get": {
      "uri": "/api/v1/scheduled_statuses",
      "method": "GET",
      "formParams": [],
      "returns": "ScheduledStatus",
      "pathParams": [],
      "name": "get",
      "queryParams": [
        {
          "description": "Return results older than ID.",
          "name": "max_id ",
          "nullable": 1,
          "required": 0,
          "type": "string"
        },
        {
          "nullable": 1,
          "name": "since_id",
          "type": "string",
          "required": 0,
          "description": "Return results newer than ID."
        },
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "min_id",
          "description": "Return results immediately newer than ID."
        },
        {
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
          "type": "integer",
          "required": 0,
          "nullable": 1,
          "name": "limit"
        }
      ],
      "namespace": "scheduled_statuses",
      "description": "View scheduled statuses"
    },
    "update": {
      "uri": "/api/v1/scheduled_statuses/:id",
      "formParams": [
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "scheduled_at",
          "description": "ISO 8601 Datetime at which the status will be published. Must be at least 5 minutes into the future."
        }
      ],
      "method": "PUT",
      "returns": "ScheduledStatus",
      "pathParams": [
        {
          "description": "The ID of the ScheduledStatus in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "name": "update",
      "queryParams": [],
      "namespace": "scheduled_statuses",
      "description": "Update a scheduled status's publishing date"
    }
  },
  "featured_tags": {
    "unfeature": {
      "method": "DELETE",
      "formParams": [],
      "returns": "empty",
      "uri": "/api/v1/featured_tags/:id",
      "pathParams": [
        {
          "description": "The ID of the FeaturedTag in the database.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ],
      "queryParams": [],
      "name": "unfeature",
      "description": "Unfeature a tag",
      "namespace": "featured_tags"
    },
    "get": {
      "returns": "FeaturedTag",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/featured_tags",
      "pathParams": [],
      "queryParams": [],
      "name": "get",
      "description": "View your featured tags",
      "namespace": "featured_tags"
    },
    "feature": {
      "uri": "/api/v1/featured_tags",
      "method": "POST",
      "formParams": [
        {
          "description": "The hashtag to be featured, without the hash sign.",
          "required": 1,
          "type": "string",
          "name": "name",
          "nullable": ""
        }
      ],
      "returns": "FeaturedTag",
      "pathParams": [],
      "name": "feature",
      "queryParams": [],
      "namespace": "featured_tags",
      "description": "Feature a tag"
    },
    "suggestions": {
      "queryParams": [],
      "name": "suggestions",
      "description": "View suggested tags to feature",
      "namespace": "featured_tags",
      "returns": "Tag",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/featured_tags/suggestions",
      "pathParams": []
    }
  },
  "conversations": {
    "get": {
      "description": "View all conversations",
      "namespace": "conversations",
      "queryParams": [
        {
          "description": "Maximum number of results to return. Defaults to 20 conversations. Max 40 conversations.",
          "type": "integer",
          "required": 0,
          "nullable": 1,
          "name": "limit"
        }
      ],
      "name": "get",
      "pathParams": [],
      "method": "GET",
      "formParams": [],
      "returns": "Conversation",
      "uri": "/api/v1/conversations"
    },
    "delete": {
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the Conversation in the database."
        }
      ],
      "uri": "/api/v1/conversations/:id",
      "method": "DELETE",
      "formParams": [],
      "returns": "empty",
      "namespace": "conversations",
      "description": "Remove a conversation",
      "name": "delete",
      "queryParams": []
    },
    "read": {
      "uri": "/api/v1/conversations/:id/read",
      "formParams": [],
      "returns": "Conversation",
      "method": "POST",
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the Conversation in the database."
        }
      ],
      "name": "read",
      "queryParams": [],
      "namespace": "conversations",
      "description": "Mark a conversation as read"
    }
  },
  "directory": {
    "get": {
      "uri": "/api/v1/directory",
      "formParams": [],
      "method": "GET",
      "returns": "Account",
      "pathParams": [],
      "name": "get",
      "queryParams": [
        {
          "nullable": 1,
          "name": "offset",
          "type": "number",
          "required": 0,
          "description": "Skip the first n results."
        },
        {
          "description": "How many accounts to load. Defaults to 40 accounts. Max 80 accounts.",
          "name": "limit",
          "nullable": 1,
          "required": 0,
          "type": "number"
        },
        {
          "description": "Use `active` to sort by most recently posted statuses (default) or `new` to sort by most recently created profiles.",
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "order"
        },
        {
          "description": "If true, returns only local accounts.",
          "nullable": 1,
          "name": "local",
          "type": "boolean",
          "required": 0
        }
      ],
      "namespace": "directory",
      "description": "View profile directory"
    }
  },
  "custom_emojis": {
    "get": {
      "uri": "/api/v1/custom_emojis",
      "formParams": [],
      "returns": "CustomEmoji",
      "method": "GET",
      "pathParams": [],
      "name": "get",
      "queryParams": [],
      "namespace": "custom_emojis",
      "description": "View all custom emoji"
    }
  },
  "proofs": {
    "get": {
      "name": "get",
      "queryParams": [
        {
          "description": "The identity provider to be looked up. Currently only supports `keybase` (case-sensitive).",
          "name": "provider",
          "nullable": 1,
          "required": 0,
          "type": "string"
        },
        {
          "required": 0,
          "type": "string",
          "name": "username",
          "nullable": 1,
          "description": "The username on the selected identity provider."
        }
      ],
      "namespace": "proofs",
      "description": "(REMOVED) View identity proofs",
      "uri": "/api/proofs",
      "returns": "empty",
      "formParams": [],
      "method": "GET",
      "pathParams": []
    }
  },
  "reports": {
    "post": {
      "uri": "/api/v1/reports",
      "formParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "account_id",
          "description": "ID of the account to report."
        },
        {
          "required": 0,
          "type": "array of string",
          "name": "status_ids[]",
          "nullable": 1,
          "description": "You can attach statuses to the report to provide additional context."
        },
        {
          "nullable": 1,
          "name": "comment",
          "type": "string",
          "required": 0,
          "description": "The reason for the report. Default maximum of 1000 characters."
        },
        {
          "type": "boolean",
          "required": 0,
          "nullable": 1,
          "name": "forward",
          "description": "If the account is remote, should the report be forwarded to the remote admin? Defaults to false."
        },
        {
          "description": "Specify if the report is due to `spam`, `violation` of enumerated instance rules, or some `other` reason. Defaults to `other`. Will be set to `violation` if `rule_ids[]` is provided (regardless of any category value you provide).",
          "name": "category",
          "nullable": 1,
          "required": 0,
          "type": "string"
        },
        {
          "description": "For `violation` category reports, specify the ID of the exact rules broken. Rules and their IDs are available via [GET /api/v1/instance/rules]({{< relref \"methods/instance#rules\" >}}) and [GET /api/v1/instance]({{< relref \"methods/instance#get\" >}}).",
          "type": "array of integer",
          "required": 0,
          "nullable": 1,
          "name": "rule_ids[]"
        }
      ],
      "method": "POST",
      "returns": "Report",
      "pathParams": [],
      "name": "post",
      "queryParams": [],
      "namespace": "reports",
      "description": "File a report"
    }
  },
  "tags": {
    "unfollow": {
      "method": "POST",
      "formParams": [],
      "returns": "Tag",
      "uri": "/api/v1/tags/:id/unfollow",
      "pathParams": [
        {
          "description": "The name of the hashtag.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ],
      "queryParams": [],
      "name": "unfollow",
      "description": "Unfollow a hashtag",
      "namespace": "tags"
    },
    "follow": {
      "name": "follow",
      "queryParams": [],
      "namespace": "tags",
      "description": "Follow a hashtag",
      "uri": "/api/v1/tags/:id/follow",
      "formParams": [],
      "returns": "Tag",
      "method": "POST",
      "pathParams": [
        {
          "description": "The name of the hashtag.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ]
    },
    "get": {
      "uri": "/api/v1/tags/:id",
      "method": "GET",
      "formParams": [],
      "returns": "Tag",
      "pathParams": [
        {
          "description": "The name of the hashtag.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id"
        }
      ],
      "name": "get",
      "queryParams": [],
      "namespace": "tags",
      "description": "View information about a single tag"
    }
  },
  "oauth": {
    "token": {
      "formParams": [
        {
          "name": "grant_type",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "Set equal to `authorization_code` if `code` is provided in order to gain user-level access. Otherwise, set equal to `client_credentials` to obtain app-level access only."
        },
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "code",
          "description": "A user authorization code, obtained via [GET /oauth/authorize](#authorize)."
        },
        {
          "description": "The client ID, obtained during app registration.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "client_id"
        },
        {
          "description": "The client secret, obtained during app registration.",
          "nullable": "",
          "name": "client_secret",
          "type": "string",
          "required": 1
        },
        {
          "description": "Set a URI to redirect the user to. If this parameter is set to urn:ietf:wg:oauth:2.0:oob then the token will be shown instead. Must match one of the `redirect_uris` declared during app registration.",
          "name": "redirect_uri",
          "nullable": "",
          "required": 1,
          "type": "string"
        },
        {
          "name": "scope",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). If `code` was provided, then this must be equal to the `scope` requested from the user. Otherwise, it must be a subset of `scopes` declared during app registration. If not provided, defaults to `read`."
        }
      ],
      "returns": "Token",
      "method": "POST",
      "uri": "/oauth/token",
      "pathParams": [],
      "queryParams": [],
      "name": "token",
      "description": "Obtain a token",
      "namespace": "oauth"
    },
    "authorize": {
      "pathParams": [],
      "method": "GET",
      "formParams": [],
      "returns": "empty",
      "uri": "/oauth/authorize",
      "description": "Authorize a user",
      "namespace": "oauth",
      "queryParams": [
        {
          "nullable": "",
          "name": "response_type",
          "type": "string",
          "required": 1,
          "description": "Should be set equal to `code`."
        },
        {
          "required": 1,
          "type": "string",
          "name": "client_id",
          "nullable": "",
          "description": "The client ID, obtained during app registration."
        },
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "redirect_uri",
          "description": "Set a URI to redirect the user to. If this parameter is set to `urn:ietf:wg:oauth:2.0:oob` then the authorization code will be shown instead. Must match one of the `redirect_uris` declared during app registration."
        },
        {
          "description": "List of requested OAuth scopes, separated by spaces (or by pluses, if using query parameters). Must be a subset of `scopes` declared during app registration. If not provided, defaults to `read`.",
          "nullable": 1,
          "name": "scope",
          "type": "string",
          "required": 0
        },
        {
          "nullable": 1,
          "name": "force_login",
          "type": "boolean",
          "required": 0,
          "description": "Forces the user to re-login, which is necessary for authorizing with multiple accounts from the same instance."
        },
        {
          "description": "The ISO 639-1 two-letter language code to use while rendering the authorization form.",
          "name": "lang",
          "nullable": 1,
          "required": 0,
          "type": "string"
        }
      ],
      "name": "authorize"
    },
    "revoke": {
      "queryParams": [],
      "name": "revoke",
      "description": "Revoke a token",
      "namespace": "oauth",
      "returns": "empty",
      "formParams": [
        {
          "description": "The client ID, obtained during app registration.",
          "name": "client_id",
          "nullable": "",
          "required": 1,
          "type": "string"
        },
        {
          "description": "The client secret, obtained during app registration.",
          "required": 1,
          "type": "string",
          "name": "client_secret",
          "nullable": ""
        },
        {
          "nullable": "",
          "name": "token",
          "type": "string",
          "required": 1,
          "description": "The previously obtained token, to be invalidated."
        }
      ],
      "method": "POST",
      "uri": "/oauth/revoke",
      "pathParams": []
    }
  },
  "notifications": {
    "get-one": {
      "queryParams": [],
      "name": "get-one",
      "description": "Get a single notification",
      "namespace": "notifications",
      "returns": "Notification",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/notifications/:id",
      "pathParams": [
        {
          "description": "The ID of the Notification in the database.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ]
    },
    "get": {
      "pathParams": [],
      "uri": "/api/v1/notifications",
      "method": "GET",
      "formParams": [],
      "returns": "Notification",
      "namespace": "notifications",
      "description": "Get all notifications",
      "name": "get",
      "queryParams": [
        {
          "name": "max_id ",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "Return results older than this ID"
        },
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "since_id",
          "description": "Return results newer than this ID"
        },
        {
          "nullable": 1,
          "name": "min_id",
          "type": "string",
          "required": 0,
          "description": "Return results immediately newer than this ID"
        },
        {
          "description": "Maximum number of results to return. Defaults to 15 notifications. Max 30 notifications.",
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1
        },
        {
          "type": "array of string",
          "required": 0,
          "nullable": 1,
          "name": "types[]",
          "description": "Types to include in the result."
        },
        {
          "name": "exclude_types[]",
          "nullable": 1,
          "required": 0,
          "type": "array of string",
          "description": "Types to exclude from the results."
        },
        {
          "name": "account_id",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "Return only notifications received from the specified account."
        }
      ]
    },
    "clear": {
      "uri": "/api/v1/notifications/clear",
      "method": "POST",
      "formParams": [],
      "returns": "empty",
      "pathParams": [],
      "name": "clear",
      "queryParams": [],
      "namespace": "notifications",
      "description": "Dismiss all notifications"
    },
    "dismiss": {
      "description": "Dismiss a single notification",
      "namespace": "notifications",
      "queryParams": [],
      "name": "dismiss",
      "pathParams": [
        {
          "description": "The ID of the Notification in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "returns": "empty",
      "formParams": [],
      "method": "POST",
      "uri": "/api/v1/notifications/:id/dismiss"
    },
    "dismiss-deprecated": {
      "uri": "/api/v1/notifications/dismiss",
      "formParams": [
        {
          "description": "The ID of the notification in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "method": "POST",
      "returns": "empty",
      "pathParams": [],
      "name": "dismiss-deprecated",
      "queryParams": [],
      "namespace": "notifications",
      "description": "(REMOVED) Dismiss a single notification"
    }
  },
  "emails": {
    "confirmation": {
      "name": "confirmation",
      "queryParams": [],
      "namespace": "emails",
      "description": "Resend confirmation email",
      "uri": "/api/v1/emails/confirmation",
      "method": "POST",
      "formParams": [],
      "returns": "empty",
      "pathParams": []
    }
  },
  "markers": {
    "get": {
      "queryParams": [
        {
          "required": 0,
          "type": "array of string",
          "name": "timeline[]",
          "nullable": 1,
          "description": "Specify the timeline(s) for which markers should be fetched. Possible values: `home`, `notifications`. If not provided, an empty object will be returned."
        }
      ],
      "name": "get",
      "description": "Get saved timeline positions",
      "namespace": "markers",
      "formParams": [],
      "method": "GET",
      "returns": "Marker",
      "uri": "/api/v1/markers",
      "pathParams": []
    },
    "create": {
      "name": "create",
      "queryParams": [],
      "namespace": "markers",
      "description": "Save your position in a timeline",
      "uri": "/api/v1/markers",
      "formParams": [],
      "method": "POST",
      "returns": "Marker",
      "pathParams": []
    }
  },
  "suggestions": {
    "v2": {
      "uri": "/api/v2/suggestions",
      "formParams": [],
      "method": "GET",
      "returns": "Suggestion",
      "pathParams": [],
      "name": "v2",
      "queryParams": [
        {
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
          "nullable": 1,
          "name": "limit",
          "type": "integer",
          "required": 0
        }
      ],
      "namespace": "suggestions",
      "description": "View follow suggestions (v2)"
    },
    "remove": {
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "account_id",
          "description": "The ID of the Account in the database."
        }
      ],
      "formParams": [],
      "returns": "empty",
      "method": "DELETE",
      "uri": "/api/v1/suggestions/:account_id",
      "description": "Remove a suggestion",
      "namespace": "suggestions",
      "queryParams": [],
      "name": "remove"
    },
    "v1": {
      "uri": "/api/v1/suggestions",
      "formParams": [],
      "returns": "Account",
      "method": "GET",
      "pathParams": [],
      "name": "v1",
      "queryParams": [
        {
          "name": "limit",
          "nullable": 1,
          "required": 0,
          "type": "integer",
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
        }
      ],
      "namespace": "suggestions",
      "description": "(DEPRECATED) View follow suggestions (v1)"
    }
  },
  "filters": {
    "statuses-add": {
      "pathParams": [
        {
          "name": "filter_id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the Filter in the database."
        }
      ],
      "uri": "/api/v2/filters/:filter_id/statuses",
      "formParams": [],
      "returns": "FilterStatus",
      "method": "POST",
      "namespace": "filters",
      "description": "Add a status to a filter group",
      "name": "statuses-add",
      "queryParams": []
    },
    "create-v1": {
      "namespace": "filters",
      "description": "Create a filter",
      "name": "create-v1",
      "queryParams": [],
      "pathParams": [],
      "uri": "/api/v1/filters",
      "formParams": [
        {
          "name": "phrase",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The text to be filtered."
        },
        {
          "description": "Where the filter should be applied. Specify at least one of `home`, `notifications`, `public`, `thread`, `account`.",
          "required": 1,
          "type": "array of string",
          "name": "context[]",
          "nullable": ""
        },
        {
          "description": "Should the server irreversibly drop matching entities from home and notifications? Defaults to false.",
          "name": "irreversible",
          "nullable": 1,
          "required": 0,
          "type": "boolean"
        },
        {
          "description": "Should the filter consider word boundaries for this keyword? Defaults to false.",
          "required": 0,
          "type": "boolean",
          "name": "whole_word",
          "nullable": 1
        },
        {
          "description": "Number of seconds from now that the filter should expire. Otherwise, `null` for a filter that doesn't expire.",
          "required": 0,
          "type": "integer",
          "name": "expires_in",
          "nullable": 1
        }
      ],
      "returns": "V1::Filter",
      "method": "POST"
    },
    "keywords-delete": {
      "uri": "/api/v2/filters/keywords/:id",
      "returns": "empty",
      "formParams": [],
      "method": "DELETE",
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the FilterKeyword in the database."
        }
      ],
      "name": "keywords-delete",
      "queryParams": [],
      "namespace": "filters",
      "description": "Remove keywords from a filter"
    },
    "update": {
      "queryParams": [],
      "name": "update",
      "description": "Update a filter",
      "namespace": "filters",
      "formParams": [
        {
          "description": "The name of the filter group.",
          "name": "title",
          "nullable": 1,
          "required": 0,
          "type": "string"
        },
        {
          "name": "context[]",
          "nullable": 1,
          "required": 0,
          "type": "array of string",
          "description": "Where the filter should be applied. Specify at least one of `home`, `notifications`, `public`, `thread`, `account`."
        },
        {
          "description": "The policy to be applied when the filter is matched. Specify `warn` or `hide`.",
          "name": "filter_action",
          "nullable": 1,
          "required": 0,
          "type": "string"
        },
        {
          "description": "How many seconds from now should the filter expire?",
          "nullable": 1,
          "name": "expires_in",
          "type": "integer",
          "required": 0
        }
      ],
      "method": "PUT",
      "returns": "Filter",
      "uri": "/api/v2/filters/:id",
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the Filter in the database."
        }
      ]
    },
    "update-v1": {
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the FilterKeyword in the database."
        }
      ],
      "formParams": [
        {
          "name": "phrase",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The text to be filtered."
        },
        {
          "name": "context[]",
          "nullable": "",
          "required": 1,
          "type": "array of string",
          "description": "Specify at least one of `home`, `notifications`, `public`, `thread`, `account`."
        },
        {
          "description": "Should the server irreversibly drop matching entities from home and notifications? Defaults to false.",
          "nullable": 1,
          "name": "irreversible",
          "type": "boolean",
          "required": 0
        },
        {
          "description": "Should the filter consider word boundaries? Defaults to false.",
          "required": 0,
          "type": "boolean",
          "name": "whole_word",
          "nullable": 1
        },
        {
          "name": "expires_in",
          "nullable": 1,
          "required": 0,
          "type": "integer",
          "description": "Number of seconds from now that the filter should expire. Otherwise, `null` for a filter that doesn't expire."
        }
      ],
      "returns": "V1::Filter",
      "method": "PUT",
      "uri": "/api/v1/filters/:id",
      "description": "Update a filter",
      "namespace": "filters",
      "queryParams": [],
      "name": "update-v1"
    },
    "get-one": {
      "pathParams": [
        {
          "description": "The ID of the Filter in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ],
      "returns": "Filter",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v2/filters/:id",
      "description": "View a specific filter",
      "namespace": "filters",
      "queryParams": [],
      "name": "get-one"
    },
    "create": {
      "formParams": [
        {
          "nullable": "",
          "name": "title",
          "type": "string",
          "required": 1,
          "description": "The name of the filter group."
        },
        {
          "nullable": "",
          "name": "context[]",
          "type": "array of string",
          "required": 1,
          "description": "Where the filter should be applied. Specify at least one of `home`, `notifications`, `public`, `thread`, `account`."
        },
        {
          "required": 0,
          "type": "string",
          "name": "filter_action",
          "nullable": 1,
          "description": "The policy to be applied when the filter is matched. Specify `warn` or `hide`."
        },
        {
          "required": 0,
          "type": "integer",
          "name": "expires_in",
          "nullable": 1,
          "description": "How many seconds from now should the filter expire?"
        }
      ],
      "method": "POST",
      "returns": "Filter",
      "uri": "/api/v2/filters",
      "pathParams": [],
      "queryParams": [],
      "name": "create",
      "description": "Create a filter",
      "namespace": "filters"
    },
    "get-v1": {
      "uri": "/api/v1/filters",
      "formParams": [],
      "returns": "V1::Filter",
      "method": "GET",
      "pathParams": [],
      "name": "get-v1",
      "queryParams": [],
      "namespace": "filters",
      "description": "View your filters"
    },
    "get-one-v1": {
      "name": "get-one-v1",
      "queryParams": [],
      "namespace": "filters",
      "description": "View a single filter",
      "uri": "/api/v1/filters/:id",
      "formParams": [],
      "method": "GET",
      "returns": "V1::Filter",
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the FilterKeyword in the database."
        }
      ]
    },
    "statuses-get-one": {
      "namespace": "filters",
      "description": "View a single status filter",
      "name": "statuses-get-one",
      "queryParams": [],
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the FilterStatus in the database."
        }
      ],
      "uri": "/api/v2/filters/statuses/:id",
      "returns": "FilterStatus",
      "formParams": [],
      "method": "GET"
    },
    "keywords-get": {
      "uri": "/api/v2/filters/:filter_id/keywords",
      "method": "GET",
      "formParams": [],
      "returns": "FilterKeyword",
      "pathParams": [
        {
          "description": "The ID of the Filter in the database.",
          "required": 1,
          "type": "string",
          "name": "filter_id",
          "nullable": ""
        }
      ],
      "name": "keywords-get",
      "queryParams": [],
      "namespace": "filters",
      "description": "View keywords added to a filter"
    },
    "delete": {
      "queryParams": [],
      "name": "delete",
      "description": "Delete a filter",
      "namespace": "filters",
      "returns": "empty",
      "formParams": [],
      "method": "DELETE",
      "uri": "/api/v2/filters/:id",
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the Filter in the database."
        }
      ]
    },
    "keywords-update": {
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the FilterKeyword in the database."
        }
      ],
      "uri": "/api/v2/filters/keywords/:id",
      "formParams": [
        {
          "description": "The keyword to be added to the filter group.",
          "nullable": "",
          "name": "keyword",
          "type": "string",
          "required": 1
        },
        {
          "description": "Whether the keyword should consider word boundaries.",
          "name": "whole_word",
          "nullable": 1,
          "required": 0,
          "type": "boolean"
        }
      ],
      "returns": "FilterKeyword",
      "method": "PUT",
      "namespace": "filters",
      "description": "Edit a keyword within a filter",
      "name": "keywords-update",
      "queryParams": []
    },
    "statuses-remove": {
      "uri": "/api/v2/filters/statuses/:id",
      "returns": "FilterStatus",
      "formParams": [],
      "method": "DELETE",
      "pathParams": [
        {
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1,
          "description": "The ID of the FilterStatus in the database."
        }
      ],
      "name": "statuses-remove",
      "queryParams": [],
      "namespace": "filters",
      "description": "Remove a status from a filter group"
    },
    "delete-v1": {
      "pathParams": [
        {
          "description": "The ID of the Filter in the database.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ],
      "uri": "/api/v1/filters/:id",
      "returns": "empty",
      "formParams": [],
      "method": "DELETE",
      "namespace": "filters",
      "description": "Remove a filter",
      "name": "delete-v1",
      "queryParams": []
    },
    "statuses-get": {
      "pathParams": [
        {
          "name": "filter_id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the Filter in the database."
        }
      ],
      "uri": "/api/v2/filters/:filter_id/statuses",
      "formParams": [],
      "returns": "FilterStatus",
      "method": "GET",
      "namespace": "filters",
      "description": "View all status filters",
      "name": "statuses-get",
      "queryParams": []
    },
    "get": {
      "description": "View all filters",
      "namespace": "filters",
      "queryParams": [],
      "name": "get",
      "pathParams": [],
      "formParams": [],
      "method": "GET",
      "returns": "Filter",
      "uri": "/api/v2/filters"
    },
    "keywords-create": {
      "description": "Add a keyword to a filter",
      "namespace": "filters",
      "queryParams": [],
      "name": "keywords-create",
      "pathParams": [
        {
          "description": "The ID of the Filter in the database.",
          "required": 1,
          "type": "string",
          "name": "filter_id",
          "nullable": ""
        }
      ],
      "formParams": [
        {
          "name": "keyword",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The keyword to be added to the filter group."
        },
        {
          "nullable": 1,
          "name": "whole_word",
          "type": "boolean",
          "required": 0,
          "description": "Whether the keyword should consider word boundaries."
        }
      ],
      "returns": "FilterKeyword",
      "method": "POST",
      "uri": "/api/v2/filters/:filter_id/keywords"
    },
    "keywords-get-one": {
      "namespace": "filters",
      "description": "View a single keyword",
      "name": "keywords-get-one",
      "queryParams": [],
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the FilterKeyword in the database."
        }
      ],
      "uri": "/api/v2/filters/keywords/:id",
      "method": "GET",
      "formParams": [],
      "returns": "FilterKeyword"
    }
  },
  "favourites": {
    "get": {
      "queryParams": [
        {
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
          "name": "limit",
          "nullable": 1,
          "required": 0,
          "type": "integer"
        }
      ],
      "name": "get",
      "description": "View favourited statuses",
      "namespace": "favourites",
      "formParams": [],
      "method": "GET",
      "returns": "Status",
      "uri": "/api/v1/favourites",
      "pathParams": []
    }
  },
  "preferences": {
    "get": {
      "uri": "/api/v1/preferences",
      "returns": "Preferences",
      "formParams": [],
      "method": "GET",
      "pathParams": [],
      "name": "get",
      "queryParams": [],
      "namespace": "preferences",
      "description": "View user preferences"
    }
  },
  "domain_blocks": {
    "get": {
      "queryParams": [
        {
          "description": "Maximum number of results to return. Defaults to 100 domain blocks. Max 200 domain blocks.",
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1
        }
      ],
      "name": "get",
      "description": "Get domain blocks",
      "namespace": "domain_blocks",
      "returns": "empty",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/domain_blocks",
      "pathParams": []
    },
    "block": {
      "namespace": "domain_blocks",
      "description": "Block a domain",
      "name": "block",
      "queryParams": [],
      "pathParams": [],
      "uri": "/api/v1/domain_blocks",
      "returns": "empty",
      "formParams": [
        {
          "nullable": "",
          "name": "domain",
          "type": "string",
          "required": 1,
          "description": "Domain to block."
        }
      ],
      "method": "POST"
    },
    "unblock": {
      "returns": "empty",
      "formParams": [
        {
          "name": "domain",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "Domain to unblock."
        }
      ],
      "method": "DELETE",
      "uri": "/api/v1/domain_blocks",
      "pathParams": [],
      "queryParams": [],
      "name": "unblock",
      "description": "Unblock a domain",
      "namespace": "domain_blocks"
    }
  },
  "media": {
    "v1": {
      "queryParams": [],
      "name": "v1",
      "description": "(DEPRECATED) Upload media as an attachment",
      "namespace": "media",
      "method": "POST",
      "formParams": [
        {
          "description": "The file to be attached, encoded using multipart form data. The file must have a MIME type.",
          "nullable": "",
          "name": "file",
          "type": "object",
          "required": 1
        },
        {
          "required": 0,
          "type": "object",
          "name": "thumbnail",
          "nullable": 1,
          "description": "The custom thumbnail of the media to be attached, encoded using multipart form data."
        },
        {
          "required": 0,
          "type": "string",
          "name": "description",
          "nullable": 1,
          "description": "A plain-text description of the media, for accessibility purposes."
        },
        {
          "name": "focus",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "Two floating points (x,y), comma-delimited, ranging from -1.0 to 1.0. See [Focal points for cropping media thumbnails]({{< relref \"api/guidelines#focal-points\" >}}) for more information."
        }
      ],
      "returns": "MediaAttachment",
      "uri": "/api/v1/media",
      "pathParams": []
    },
    "update": {
      "description": "Update media attachment",
      "namespace": "media",
      "queryParams": [],
      "name": "update",
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the MediaAttachment in the database."
        }
      ],
      "formParams": [
        {
          "type": "object",
          "required": 0,
          "nullable": 1,
          "name": "thumbnail",
          "description": "The custom thumbnail of the media to be attached, encoded using multipart form data."
        },
        {
          "description": "A plain-text description of the media, for accessibility purposes.",
          "nullable": 1,
          "name": "description",
          "type": "string",
          "required": 0
        },
        {
          "name": "focus",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "Two floating points (x,y), comma-delimited, ranging from -1.0 to 1.0. See [Focal points for cropping media thumbnails]({{< relref \"api/guidelines#focal-points\" >}}) for more information."
        }
      ],
      "returns": "MediaAttachment",
      "method": "PUT",
      "uri": "/api/v1/media/:id"
    },
    "get": {
      "namespace": "media",
      "description": "Get media attachment",
      "name": "get",
      "queryParams": [],
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the MediaAttachment in the database."
        }
      ],
      "uri": "/api/v1/media/:id",
      "formParams": [],
      "method": "GET",
      "returns": "MediaAttachment"
    },
    "v2": {
      "formParams": [
        {
          "name": "file",
          "nullable": "",
          "required": 1,
          "type": "object",
          "description": "The file to be attached, encoded using multipart form data. The file must have a MIME type."
        },
        {
          "description": "The custom thumbnail of the media to be attached, encoded using multipart form data.",
          "name": "thumbnail",
          "nullable": 1,
          "required": 0,
          "type": "object"
        },
        {
          "description": "A plain-text description of the media, for accessibility purposes.",
          "required": 0,
          "type": "string",
          "name": "description",
          "nullable": 1
        },
        {
          "description": "Two floating points (x,y), comma-delimited, ranging from -1.0 to 1.0. See [Focal points for cropping media thumbnails]({{< relref \"api/guidelines#focal-points\" >}}) for more information.",
          "nullable": 1,
          "name": "focus",
          "type": "string",
          "required": 0
        }
      ],
      "returns": "MediaAttachment",
      "method": "POST",
      "uri": "/api/v2/media",
      "pathParams": [],
      "queryParams": [],
      "name": "v2",
      "description": "Upload media as an attachment (async)",
      "namespace": "media"
    }
  },
  "apps": {
    "create": {
      "description": "Create an application",
      "namespace": "apps",
      "queryParams": [],
      "name": "create",
      "pathParams": [],
      "formParams": [
        {
          "description": "A name for your application",
          "nullable": "",
          "name": "client_name",
          "type": "string",
          "required": 1
        },
        {
          "description": "Where the user should be redirected after authorization. To display the authorization code to the user instead of redirecting to a web page, use `urn:ietf:wg:oauth:2.0:oob` in this parameter.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "redirect_uris"
        },
        {
          "nullable": 1,
          "name": "scopes",
          "type": "string",
          "required": 0,
          "description": "Space separated list of scopes. If none is provided, defaults to `read`. See [OAuth Scopes]({{< relref \"api/oauth-scopes\" >}}) for a list of possible scopes."
        },
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "website",
          "description": "A URL to the homepage of your app"
        }
      ],
      "returns": "Application",
      "method": "POST",
      "uri": "/api/v1/apps"
    },
    "verify_credentials": {
      "pathParams": [],
      "method": "GET",
      "formParams": [],
      "returns": "Application",
      "uri": "/api/v1/apps/verify_credentials",
      "description": "Verify your app works",
      "namespace": "apps",
      "queryParams": [],
      "name": "verify_credentials"
    }
  },
  "search": {
    "v2": {
      "uri": "/api/v2/search",
      "formParams": [],
      "returns": "Search",
      "method": "GET",
      "pathParams": [],
      "name": "v2",
      "queryParams": [
        {
          "description": "The search query.",
          "name": "q",
          "nullable": "",
          "required": 1,
          "type": "string"
        },
        {
          "name": "type",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "Specify whether to search for only `accounts`, `hashtags`, `statuses`"
        },
        {
          "required": 0,
          "type": "boolean",
          "name": "resolve",
          "nullable": 1,
          "description": "Attempt WebFinger lookup? Defaults to false."
        },
        {
          "description": "Only include accounts that the user is following? Defaults to false.",
          "name": "following",
          "nullable": 1,
          "required": 0,
          "type": "boolean"
        },
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "account_id",
          "description": "If provided, will only return statuses authored by this account."
        },
        {
          "description": "Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags.",
          "nullable": 1,
          "name": "exclude_unreviewed",
          "type": "boolean",
          "required": 0
        },
        {
          "nullable": 1,
          "name": "max_id ",
          "type": "string",
          "required": 0,
          "description": "Return results older than this ID."
        },
        {
          "required": 0,
          "type": "string",
          "name": "min_id",
          "nullable": 1,
          "description": "Return results immediately newer than this ID."
        },
        {
          "nullable": 1,
          "name": "limit",
          "type": "integer",
          "required": 0,
          "description": "Maximum number of results to return, per type. Defaults to 20 results per category. Max 40 results per category."
        },
        {
          "type": "integer",
          "required": 0,
          "nullable": 1,
          "name": "offset",
          "description": "Skip the first n results."
        }
      ],
      "namespace": "search",
      "description": "Perform a search"
    },
    "v1": {
      "pathParams": [],
      "returns": "Search",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/search",
      "description": "(REMOVED) Search results (v1)",
      "namespace": "search",
      "queryParams": [
        {
          "description": "The search query.",
          "nullable": "",
          "name": "q",
          "type": "string",
          "required": 1
        },
        {
          "required": 0,
          "type": "string",
          "name": "type",
          "nullable": 1,
          "description": "Specify whether to search for only `accounts`, `hashtags`, `statuses`"
        },
        {
          "name": "resolve",
          "nullable": 1,
          "required": 0,
          "type": "boolean",
          "description": "Attempt WebFinger lookup? Defaults to false."
        },
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "account_id",
          "description": "If provided, will only return statuses authored by this account."
        },
        {
          "description": "Return results older than this ID.",
          "name": "max_id ",
          "nullable": 1,
          "required": 0,
          "type": "string"
        },
        {
          "description": "Return results immediately newer than this ID.",
          "nullable": 1,
          "name": "min_id",
          "type": "string",
          "required": 0
        },
        {
          "description": "Maximum number of results to return, per type. Defaults to 20 results per category. Max 40 results per category.",
          "name": "limit",
          "nullable": 1,
          "required": 0,
          "type": "integer"
        },
        {
          "description": "Offset in search results, used for pagination. Defaults to 0.",
          "name": "offset",
          "nullable": 1,
          "required": 0,
          "type": "integer"
        }
      ],
      "name": "v1"
    }
  },
  "lists": {
    "accounts-add": {
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the List in the database."
        }
      ],
      "formParams": [
        {
          "nullable": "",
          "name": "account_ids[]",
          "type": "array of string",
          "required": 1,
          "description": "The accounts that should be added to the list."
        }
      ],
      "method": "POST",
      "returns": "empty",
      "uri": "/api/v1/lists/:id/accounts",
      "description": "Add accounts to a list",
      "namespace": "lists",
      "queryParams": [],
      "name": "accounts-add"
    },
    "create": {
      "queryParams": [],
      "name": "create",
      "description": "Create a list",
      "namespace": "lists",
      "formParams": [
        {
          "required": 1,
          "type": "string",
          "name": "title",
          "nullable": "",
          "description": "The title of the list to be created."
        },
        {
          "description": "One of `followed`, `list`, or `none`. Defaults to `list`.",
          "name": "replies_policy",
          "nullable": 1,
          "required": 0,
          "type": "string"
        }
      ],
      "method": "POST",
      "returns": "List",
      "uri": "/api/v1/lists",
      "pathParams": []
    },
    "get-one": {
      "uri": "/api/v1/lists/:id",
      "formParams": [],
      "returns": "List",
      "method": "GET",
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the List in the database."
        }
      ],
      "name": "get-one",
      "queryParams": [],
      "namespace": "lists",
      "description": "Show a single list"
    },
    "get": {
      "queryParams": [],
      "name": "get",
      "description": "View your lists",
      "namespace": "lists",
      "method": "GET",
      "formParams": [],
      "returns": "List",
      "uri": "/api/v1/lists",
      "pathParams": []
    },
    "accounts-remove": {
      "description": "Remove accounts from list",
      "namespace": "lists",
      "queryParams": [],
      "name": "accounts-remove",
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the List in the database."
        }
      ],
      "method": "DELETE",
      "formParams": [
        {
          "name": "account_ids[]",
          "nullable": "",
          "required": 1,
          "type": "array of string",
          "description": "The accounts that should be removed from the list."
        }
      ],
      "returns": "empty",
      "uri": "/api/v1/lists/:id/accounts"
    },
    "accounts": {
      "queryParams": [
        {
          "description": "Maximum number of results. Defaults to 40 accounts. Max 80 accounts. Set to 0 in order to get all accounts without pagination.",
          "name": "limit",
          "nullable": 1,
          "required": 0,
          "type": "integer"
        }
      ],
      "name": "accounts",
      "description": "View accounts in a list",
      "namespace": "lists",
      "method": "GET",
      "formParams": [],
      "returns": "Account",
      "uri": "/api/v1/lists/:id/accounts",
      "pathParams": [
        {
          "description": "The ID of the List in the database.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id"
        }
      ]
    },
    "update": {
      "pathParams": [
        {
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1,
          "description": "The ID of the List in the database."
        }
      ],
      "method": "PUT",
      "formParams": [
        {
          "nullable": "",
          "name": "title",
          "type": "string",
          "required": 1,
          "description": "The title of the list to be created."
        },
        {
          "description": "One of `followed`, `list`, or `none`. Defaults to `list`.",
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "replies_policy"
        }
      ],
      "returns": "List",
      "uri": "/api/v1/lists/:id",
      "description": "Update a list",
      "namespace": "lists",
      "queryParams": [],
      "name": "update"
    },
    "delete": {
      "method": "DELETE",
      "formParams": [],
      "returns": "empty",
      "uri": "/api/v1/lists/:id",
      "pathParams": [
        {
          "description": "The ID of the List in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "queryParams": [],
      "name": "delete",
      "description": "Delete a list",
      "namespace": "lists"
    }
  },
  "announcements": {
    "put-reactions": {
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the Announcement in the database."
        },
        {
          "name": "name",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "Unicode emoji, or the shortcode of a custom emoji."
        }
      ],
      "uri": "/api/v1/announcements/:id/reactions/:name",
      "method": "PUT",
      "formParams": [],
      "returns": "empty",
      "namespace": "announcements",
      "description": "Add a reaction to an announcement",
      "name": "put-reactions",
      "queryParams": []
    },
    "get": {
      "description": "View all announcements",
      "namespace": "announcements",
      "queryParams": [
        {
          "nullable": 1,
          "name": "with_dismissed",
          "type": "boolean",
          "required": 0,
          "description": "If true, response will include announcements dismissed by the user. Defaults to false."
        }
      ],
      "name": "get",
      "pathParams": [],
      "formParams": [],
      "returns": "Announcement",
      "method": "GET",
      "uri": "/api/v1/announcements"
    },
    "dismiss": {
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the Announcement in the database."
        }
      ],
      "returns": "empty",
      "formParams": [],
      "method": "POST",
      "uri": "/api/v1/announcements/:id/dismiss",
      "description": "Dismiss an announcement",
      "namespace": "announcements",
      "queryParams": [],
      "name": "dismiss"
    },
    "delete-reactions": {
      "namespace": "announcements",
      "description": "Remove a reaction from an announcement",
      "name": "delete-reactions",
      "queryParams": [],
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the Announcement in the database."
        },
        {
          "description": "Unicode emoji, or the shortcode of a custom emoji.",
          "required": 1,
          "type": "string",
          "name": "name",
          "nullable": ""
        }
      ],
      "uri": "/api/v1/announcements/:id/reactions/:name",
      "method": "DELETE",
      "formParams": [],
      "returns": "empty"
    }
  },
  "polls": {
    "get": {
      "pathParams": [
        {
          "description": "The ID of the Poll in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ],
      "uri": "/api/v1/polls/:id",
      "formParams": [],
      "method": "GET",
      "returns": "Poll",
      "namespace": "polls",
      "description": "View a poll",
      "name": "get",
      "queryParams": []
    },
    "vote": {
      "uri": "/api/v1/polls/:id/votes",
      "formParams": [
        {
          "type": "array of integer",
          "required": 1,
          "nullable": "",
          "name": "choices[]",
          "description": "Provide your own votes as an index for each option (starting from 0)."
        }
      ],
      "returns": "Poll",
      "method": "POST",
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the Poll in the database."
        }
      ],
      "name": "vote",
      "queryParams": [],
      "namespace": "polls",
      "description": "Vote on a poll"
    }
  },
  "instance": {
    "v2": {
      "uri": "/api/v2/instance",
      "formParams": [],
      "method": "GET",
      "returns": "Instance",
      "pathParams": [],
      "name": "v2",
      "queryParams": [],
      "namespace": "instance",
      "description": "View server information"
    },
    "domain_blocks": {
      "name": "domain_blocks",
      "queryParams": [],
      "namespace": "instance",
      "description": "View moderated servers",
      "uri": "/api/v1/instance/domain_blocks",
      "formParams": [],
      "returns": "DomainBlock",
      "method": "GET",
      "pathParams": []
    },
    "peers": {
      "pathParams": [],
      "formParams": [],
      "method": "GET",
      "returns": "empty",
      "uri": "/api/v1/instance/peers",
      "description": "List of connected domains",
      "namespace": "instance",
      "queryParams": [],
      "name": "peers"
    },
    "extended_description": {
      "namespace": "instance",
      "description": "View extended description",
      "name": "extended_description",
      "queryParams": [],
      "pathParams": [],
      "uri": "/api/v1/instance/extended_description",
      "formParams": [],
      "returns": "ExtendedDescription",
      "method": "GET"
    },
    "rules": {
      "name": "rules",
      "queryParams": [],
      "namespace": "instance",
      "description": "List of rules",
      "uri": "/api/v1/instance/rules",
      "method": "GET",
      "formParams": [],
      "returns": "Rule",
      "pathParams": []
    },
    "activity": {
      "formParams": [],
      "method": "GET",
      "returns": "empty",
      "uri": "/api/v1/instance/activity",
      "pathParams": [],
      "queryParams": [],
      "name": "activity",
      "description": "Weekly activity",
      "namespace": "instance"
    },
    "v1": {
      "pathParams": [],
      "method": "GET",
      "formParams": [],
      "returns": "V1::Instance",
      "uri": "/api/v1/instance",
      "description": "(DEPRECATED) View server information (V1)",
      "namespace": "instance",
      "queryParams": [],
      "name": "v1"
    }
  },
  "endorsements": {
    "get": {
      "method": "GET",
      "formParams": [],
      "returns": "Account",
      "uri": "/api/v1/endorsements",
      "pathParams": [],
      "queryParams": [
        {
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1
        }
      ],
      "name": "get",
      "description": "View currently featured profiles",
      "namespace": "endorsements"
    }
  },
  "trends": {
    "statuses": {
      "pathParams": [],
      "returns": "Status",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/trends/statuses",
      "description": "View trending statuses",
      "namespace": "trends",
      "queryParams": [
        {
          "name": "limit",
          "nullable": 1,
          "required": 0,
          "type": "integer",
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
        },
        {
          "description": "Skip the first n results.",
          "nullable": 1,
          "name": "offset",
          "type": "integer",
          "required": 0
        }
      ],
      "name": "statuses"
    },
    "tags": {
      "name": "tags",
      "queryParams": [
        {
          "type": "integer",
          "required": 0,
          "nullable": 1,
          "name": "limit",
          "description": "Maximum number of results to return. Defaults to 10 tags. Max 20 tags."
        },
        {
          "description": "Skip the first n results.",
          "name": "offset",
          "nullable": 1,
          "required": 0,
          "type": "integer"
        }
      ],
      "namespace": "trends",
      "description": "View trending tags",
      "uri": "/api/v1/trends/tags",
      "formParams": [],
      "method": "GET",
      "returns": "Tag",
      "pathParams": []
    },
    "links": {
      "pathParams": [],
      "uri": "/api/v1/trends/links",
      "formParams": [],
      "returns": "Trends::Link",
      "method": "GET",
      "namespace": "trends",
      "description": "View trending links",
      "name": "links",
      "queryParams": [
        {
          "description": "Maximum number of results to return. Defaults to 10 links. Max 20 links.",
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1
        },
        {
          "description": "Skip the first n results.",
          "type": "integer",
          "required": 0,
          "nullable": 1,
          "name": "offset"
        }
      ]
    }
  },
  "accounts": {
    "featured_tags": {
      "method": "GET",
      "formParams": [],
      "returns": "FeaturedTag",
      "uri": "/api/v1/accounts/:id/featured_tags",
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1
        }
      ],
      "queryParams": [],
      "name": "featured_tags",
      "description": "Get account's featured tags",
      "namespace": "accounts"
    },
    "familiar_followers": {
      "method": "GET",
      "formParams": [],
      "returns": "FamiliarFollowers",
      "uri": "/api/v1/accounts/familiar_followers",
      "pathParams": [],
      "queryParams": [
        {
          "required": 0,
          "type": "array of string",
          "name": "id[]",
          "nullable": 1,
          "description": "Find familiar followers for the provided account IDs."
        }
      ],
      "name": "familiar_followers",
      "description": "Find familiar followers",
      "namespace": "accounts"
    },
    "followers": {
      "namespace": "accounts",
      "description": "Get account's followers",
      "name": "followers",
      "queryParams": [
        {
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
          "nullable": 1,
          "name": "limit",
          "type": "integer",
          "required": 0
        }
      ],
      "pathParams": [
        {
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The ID of the Account in the database."
        }
      ],
      "uri": "/api/v1/accounts/:id/followers",
      "returns": "Account",
      "formParams": [],
      "method": "GET"
    },
    "unpin": {
      "name": "unpin",
      "queryParams": [],
      "namespace": "accounts",
      "description": "Unfeature account from profile",
      "uri": "/api/v1/accounts/:id/unpin",
      "formParams": [],
      "method": "POST",
      "returns": "Relationship",
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the Account in the database."
        }
      ]
    },
    "unfollow": {
      "name": "unfollow",
      "queryParams": [],
      "namespace": "accounts",
      "description": "Unfollow account",
      "uri": "/api/v1/accounts/:id/unfollow",
      "method": "POST",
      "formParams": [],
      "returns": "Relationship",
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ]
    },
    "unblock": {
      "formParams": [],
      "method": "POST",
      "returns": "Relationship",
      "uri": "/api/v1/accounts/:id/unblock",
      "pathParams": [
        {
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1,
          "description": "The ID of the Account in the database."
        }
      ],
      "queryParams": [],
      "name": "unblock",
      "description": "Unblock account",
      "namespace": "accounts"
    },
    "statuses": {
      "description": "Get account's statuses",
      "namespace": "accounts",
      "queryParams": [
        {
          "description": "Return results older than this ID",
          "required": 0,
          "type": "string",
          "name": "max_id ",
          "nullable": 1
        },
        {
          "description": "Return results newer than this ID",
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "since_id"
        },
        {
          "description": "Return results immediately newer than this ID",
          "required": 0,
          "type": "string",
          "name": "min_id",
          "nullable": 1
        },
        {
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1,
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
        },
        {
          "description": "Filter out statuses without attachments.",
          "required": 0,
          "type": "boolean",
          "name": "only_media",
          "nullable": 1
        },
        {
          "name": "exclude_replies",
          "nullable": 1,
          "required": 0,
          "type": "boolean",
          "description": "Filter out statuses in reply to a different account."
        },
        {
          "description": "Filter out boosts from the response.",
          "type": "boolean",
          "required": 0,
          "nullable": 1,
          "name": "exclude_reblogs"
        },
        {
          "nullable": 1,
          "name": "pinned",
          "type": "boolean",
          "required": 0,
          "description": "Filter for pinned statuses only. Defaults to false, which includes all statuses. Pinned statuses do not receive special priority in the order of the returned results."
        },
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "tagged",
          "description": "Filter for statuses using a specific hashtag."
        }
      ],
      "name": "statuses",
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the Account in the database."
        }
      ],
      "formParams": [],
      "method": "GET",
      "returns": "Status",
      "uri": "/api/v1/accounts/:id/statuses"
    },
    "mute": {
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id"
        }
      ],
      "returns": "Relationship",
      "formParams": [
        {
          "description": "Mute notifications in addition to statuses? Defaults to true.",
          "name": "notifications",
          "nullable": 1,
          "required": 0,
          "type": "boolean"
        },
        {
          "description": "How long the mute should last, in seconds. Defaults to 0 (indefinite).",
          "nullable": 1,
          "name": "duration",
          "type": "number",
          "required": 0
        }
      ],
      "method": "POST",
      "uri": "/api/v1/accounts/:id/mute",
      "description": "Mute account",
      "namespace": "accounts",
      "queryParams": [],
      "name": "mute"
    },
    "relationships": {
      "name": "relationships",
      "queryParams": [
        {
          "description": "Check relationships for the provided account IDs.",
          "required": 0,
          "type": "array",
          "name": "id[]",
          "nullable": 1
        }
      ],
      "namespace": "accounts",
      "description": "Check relationships to other accounts",
      "uri": "/api/v1/accounts/relationships",
      "method": "GET",
      "formParams": [],
      "returns": "Relationship",
      "pathParams": []
    },
    "get": {
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id"
        }
      ],
      "uri": "/api/v1/accounts/:id",
      "returns": "Account",
      "formParams": [],
      "method": "GET",
      "namespace": "accounts",
      "description": "Get account",
      "name": "get",
      "queryParams": []
    },
    "following": {
      "queryParams": [
        {
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts.",
          "nullable": 1,
          "name": "limit",
          "type": "integer",
          "required": 0
        }
      ],
      "name": "following",
      "description": "Get account's following",
      "namespace": "accounts",
      "returns": "Account",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/accounts/:id/following",
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ]
    },
    "verify_credentials": {
      "namespace": "accounts",
      "description": "Verify account credentials",
      "name": "verify_credentials",
      "queryParams": [],
      "pathParams": [],
      "uri": "/api/v1/accounts/verify_credentials",
      "returns": "CredentialAccount",
      "formParams": [],
      "method": "GET"
    },
    "lookup": {
      "description": "Lookup account ID from Webfinger address",
      "namespace": "accounts",
      "queryParams": [
        {
          "description": "The username or Webfinger address to lookup.",
          "nullable": "",
          "name": "acct",
          "type": "string",
          "required": 1
        }
      ],
      "name": "lookup",
      "pathParams": [],
      "method": "GET",
      "formParams": [],
      "returns": "Account",
      "uri": "/api/v1/accounts/lookup"
    },
    "identity_proofs": {
      "name": "identity_proofs",
      "queryParams": [],
      "namespace": "accounts",
      "description": "(DEPRECATED) Identity proofs",
      "uri": "/api/v1/accounts/:id/identity_proofs",
      "formParams": [],
      "method": "GET",
      "returns": "IdentityProof",
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ]
    },
    "create": {
      "queryParams": [],
      "name": "create",
      "description": "Register an account",
      "namespace": "accounts",
      "returns": "Token",
      "formParams": [
        {
          "required": 1,
          "type": "string",
          "name": "username",
          "nullable": "",
          "description": "The desired username for the account"
        },
        {
          "description": "The email address to be used for login",
          "required": 1,
          "type": "string",
          "name": "email",
          "nullable": ""
        },
        {
          "name": "password",
          "nullable": "",
          "required": 1,
          "type": "string",
          "description": "The password to be used for login"
        },
        {
          "description": "Whether the user agrees to the local rules, terms, and policies. These should be presented to the user in order to allow them to consent before setting this parameter to TRUE.",
          "type": "boolean",
          "required": 1,
          "nullable": "",
          "name": "agreement"
        },
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "locale",
          "description": "The language of the confirmation email that will be sent."
        },
        {
          "description": "If registrations require manual approval, this text will be reviewed by moderators.",
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "reason"
        }
      ],
      "method": "POST",
      "uri": "/api/v1/accounts",
      "pathParams": []
    },
    "remove_from_followers": {
      "method": "POST",
      "formParams": [],
      "returns": "Relationship",
      "uri": "/api/v1/accounts/:id/remove_from_followers",
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": ""
        }
      ],
      "queryParams": [],
      "name": "remove_from_followers",
      "description": "Remove account from followers",
      "namespace": "accounts"
    },
    "unmute": {
      "pathParams": [
        {
          "description": "The ID of the Account in the database.",
          "name": "id",
          "nullable": "",
          "required": 1,
          "type": "string"
        }
      ],
      "uri": "/api/v1/accounts/:id/unmute",
      "formParams": [],
      "returns": "Relationship",
      "method": "POST",
      "namespace": "accounts",
      "description": "Unmute account",
      "name": "unmute",
      "queryParams": []
    },
    "follow": {
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "id",
          "description": "The ID of the Account in the database."
        }
      ],
      "uri": "/api/v1/accounts/:id/follow",
      "formParams": [
        {
          "description": "Receive this account's reblogs in home timeline? Defaults to true.",
          "required": 0,
          "type": "boolean",
          "name": "reblogs",
          "nullable": 1
        },
        {
          "description": "Receive notifications when this account posts a status? Defaults to false.",
          "type": "boolean",
          "required": 0,
          "nullable": 1,
          "name": "notify"
        },
        {
          "description": "Filter received statuses for these languages. If not provided, you will receive this account's posts in all languages.",
          "required": 0,
          "type": "array of string (iso 639-1 language two-letter code)",
          "name": "languages",
          "nullable": 1
        }
      ],
      "method": "POST",
      "returns": "Relationship",
      "namespace": "accounts",
      "description": "Follow account",
      "name": "follow",
      "queryParams": []
    },
    "search": {
      "pathParams": [],
      "uri": "/api/v1/accounts/search",
      "formParams": [],
      "returns": "Account",
      "method": "GET",
      "namespace": "accounts",
      "description": "Search for matching accounts",
      "name": "search",
      "queryParams": [
        {
          "description": "Search query for accounts.",
          "required": 1,
          "type": "string",
          "name": "q",
          "nullable": ""
        },
        {
          "description": "Maximum number of results. Defaults to 40 accounts. Max 80 accounts.",
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1
        },
        {
          "name": "offset",
          "nullable": 1,
          "required": 0,
          "type": "integer",
          "description": "Skip the first n results."
        },
        {
          "required": 0,
          "type": "boolean",
          "name": "resolve",
          "nullable": 1,
          "description": "Attempt WebFinger lookup. Defaults to false. Use this when `q` is an exact address."
        },
        {
          "description": "Limit the search to users you are following. Defaults to false.",
          "nullable": 1,
          "name": "following",
          "type": "boolean",
          "required": 0
        }
      ]
    },
    "update_credentials": {
      "formParams": [
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "display_name",
          "description": "The display name to use for the profile. "
        },
        {
          "description": "The account bio.",
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "note"
        },
        {
          "required": 0,
          "type": "boolean",
          "name": "locked",
          "nullable": 1,
          "description": "Whether manual approval of follow requests is required."
        },
        {
          "type": "boolean",
          "required": 0,
          "nullable": 1,
          "name": "bot",
          "description": "Whether the account has a bot flag."
        },
        {
          "type": "boolean",
          "required": 0,
          "nullable": 1,
          "name": "discoverable",
          "description": "Whether the account should be shown in the profile directory."
        },
        {
          "required": 0,
          "type": "hash",
          "name": "fields_attributes",
          "nullable": 1,
          "description": "The profile fields to be set. Inside this hash, the key is an integer cast to a string (although the exact integer does not matter), and the value is another hash including `name` and `value`. By default, max 4 fields."
        }
      ],
      "method": "PATCH",
      "returns": "Account",
      "uri": "/api/v1/accounts/update_credentials",
      "pathParams": [],
      "queryParams": [],
      "name": "update_credentials",
      "description": "Update account credentials",
      "namespace": "accounts"
    },
    "pin": {
      "uri": "/api/v1/accounts/:id/pin",
      "formParams": [],
      "returns": "Relationship",
      "method": "POST",
      "pathParams": [
        {
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1,
          "description": "The ID of the Account in the database."
        }
      ],
      "name": "pin",
      "queryParams": [],
      "namespace": "accounts",
      "description": "Feature account on your profile"
    },
    "note": {
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the Account in the database."
        }
      ],
      "formParams": [
        {
          "name": "comment",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "The comment to be set on that user. Provide an empty string or leave out this parameter to clear the currently set note."
        }
      ],
      "method": "POST",
      "returns": "Relationship",
      "uri": "/api/v1/accounts/:id/note",
      "description": "Set private note on profile",
      "namespace": "accounts",
      "queryParams": [],
      "name": "note"
    },
    "block": {
      "method": "POST",
      "formParams": [],
      "returns": "Relationship",
      "uri": "/api/v1/accounts/:id/block",
      "pathParams": [
        {
          "nullable": "",
          "name": "id",
          "type": "string",
          "required": 1,
          "description": "The ID of the Account in the database."
        }
      ],
      "queryParams": [],
      "name": "block",
      "description": "Block account",
      "namespace": "accounts"
    },
    "lists": {
      "method": "GET",
      "formParams": [],
      "returns": "List",
      "uri": "/api/v1/accounts/:id/lists",
      "pathParams": [
        {
          "required": 1,
          "type": "string",
          "name": "id",
          "nullable": "",
          "description": "The ID of the Account in the database."
        }
      ],
      "queryParams": [],
      "name": "lists",
      "description": "Get lists containing this account",
      "namespace": "accounts"
    }
  },
  "bookmarks": {
    "get": {
      "name": "get",
      "queryParams": [
        {
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1,
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses."
        }
      ],
      "namespace": "bookmarks",
      "description": "View bookmarked statuses",
      "uri": "/api/v1/bookmarks",
      "returns": "Status",
      "formParams": [],
      "method": "GET",
      "pathParams": []
    }
  },
  "timelines": {
    "home": {
      "returns": "Status",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/timelines/home",
      "pathParams": [],
      "queryParams": [
        {
          "required": 0,
          "type": "string",
          "name": "max_id ",
          "nullable": 1,
          "description": "Return results older than ID."
        },
        {
          "name": "since_id",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "Return results newer than ID."
        },
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "min_id",
          "description": "Return results immediately newer than ID."
        },
        {
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
          "type": "integer",
          "required": 0,
          "nullable": 1,
          "name": "limit"
        }
      ],
      "name": "home",
      "description": "View home timeline",
      "namespace": "timelines"
    },
    "tag": {
      "queryParams": [
        {
          "description": "Return statuses that contain any of these additional tags.",
          "name": "any[]",
          "nullable": 1,
          "required": 0,
          "type": "array of string"
        },
        {
          "description": "Return statuses that contain all of these additional tags.",
          "name": "all[]",
          "nullable": 1,
          "required": 0,
          "type": "array of string"
        },
        {
          "type": "array of string",
          "required": 0,
          "nullable": 1,
          "name": "none[]",
          "description": "Return statuses that contain none of these additional tags."
        },
        {
          "type": "boolean",
          "required": 0,
          "nullable": 1,
          "name": "local",
          "description": "Return only local statuses? Defaults to false."
        },
        {
          "type": "boolean",
          "required": 0,
          "nullable": 1,
          "name": "remote",
          "description": "Return only remote statuses? Defaults to false."
        },
        {
          "description": "Return only statuses with media attachments? Defaults to false.",
          "required": 0,
          "type": "boolean",
          "name": "only_media",
          "nullable": 1
        },
        {
          "nullable": 1,
          "name": "max_id ",
          "type": "string",
          "required": 0,
          "description": "Return results older than ID."
        },
        {
          "nullable": 1,
          "name": "since_id",
          "type": "string",
          "required": 0,
          "description": "Return results newer than ID."
        },
        {
          "description": "Return results immediately newer than ID.",
          "name": "min_id",
          "nullable": 1,
          "required": 0,
          "type": "string"
        },
        {
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1
        }
      ],
      "name": "tag",
      "description": "View hashtag timeline",
      "namespace": "timelines",
      "formParams": [],
      "returns": "Status",
      "method": "GET",
      "uri": "/api/v1/timelines/tag/:hashtag",
      "pathParams": [
        {
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "hashtag",
          "description": "The name of the hashtag (not including the # symbol)."
        }
      ]
    },
    "public": {
      "name": "public",
      "queryParams": [
        {
          "description": "Show only local statuses? Defaults to false.",
          "nullable": 1,
          "name": "local",
          "type": "boolean",
          "required": 0
        },
        {
          "required": 0,
          "type": "boolean",
          "name": "remote",
          "nullable": 1,
          "description": "Show only remote statuses? Defaults to false."
        },
        {
          "name": "only_media",
          "nullable": 1,
          "required": 0,
          "type": "boolean",
          "description": "Show only statuses with media attached? Defaults to false."
        },
        {
          "name": "max_id ",
          "nullable": 1,
          "required": 0,
          "type": "string",
          "description": "Return results older than ID."
        },
        {
          "description": "Return results newer than ID.",
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "since_id"
        },
        {
          "required": 0,
          "type": "string",
          "name": "min_id",
          "nullable": 1,
          "description": "Return results immediately newer than ID."
        },
        {
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
          "required": 0,
          "type": "integer",
          "name": "limit",
          "nullable": 1
        }
      ],
      "namespace": "timelines",
      "description": "View public timeline",
      "uri": "/api/v1/timelines/public",
      "method": "GET",
      "formParams": [],
      "returns": "Status",
      "pathParams": []
    },
    "direct": {
      "pathParams": [],
      "formParams": [],
      "method": "GET",
      "returns": "Status",
      "uri": "/api/v1/timelines/direct",
      "description": "(DEPRECATED) View direct timeline",
      "namespace": "timelines",
      "queryParams": [
        {
          "description": "Return results older than ID.",
          "required": 0,
          "type": "string",
          "name": "max_id ",
          "nullable": 1
        },
        {
          "description": "Return results newer than ID.",
          "required": 0,
          "type": "string",
          "name": "since_id",
          "nullable": 1
        },
        {
          "description": "Return results immediately newer than ID.",
          "nullable": 1,
          "name": "min_id",
          "type": "string",
          "required": 0
        },
        {
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
          "nullable": 1,
          "name": "limit",
          "type": "integer",
          "required": 0
        }
      ],
      "name": "direct"
    },
    "list": {
      "name": "list",
      "queryParams": [
        {
          "type": "string",
          "required": 0,
          "nullable": 1,
          "name": "max_id ",
          "description": "Return results older than ID."
        },
        {
          "description": "Return results newer than ID.",
          "required": 0,
          "type": "string",
          "name": "since_id",
          "nullable": 1
        },
        {
          "required": 0,
          "type": "string",
          "name": "min_id",
          "nullable": 1,
          "description": "Return results immediately newer than ID."
        },
        {
          "description": "Maximum number of results to return. Defaults to 20 statuses. Max 40 statuses.",
          "nullable": 1,
          "name": "limit",
          "type": "integer",
          "required": 0
        }
      ],
      "namespace": "timelines",
      "description": "View list timeline",
      "uri": "/api/v1/timelines/list/:list_id",
      "method": "GET",
      "formParams": [],
      "returns": "Status",
      "pathParams": [
        {
          "description": "Local ID of the List in the database.",
          "type": "string",
          "required": 1,
          "nullable": "",
          "name": "list_id"
        }
      ]
    }
  },
  "blocks": {
    "get": {
      "returns": "Account",
      "formParams": [],
      "method": "GET",
      "uri": "/api/v1/blocks",
      "pathParams": [],
      "queryParams": [
        {
          "type": "integer",
          "required": 0,
          "nullable": 1,
          "name": "limit",
          "description": "Maximum number of results to return. Defaults to 40 accounts. Max 80 accounts."
        }
      ],
      "name": "get",
      "description": "View blocked users",
      "namespace": "blocks"
    }
  }
}
